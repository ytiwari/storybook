(window.webpackJsonp=window.webpackJsonp||[]).push([[1],{123:function(module,__webpack_exports__,__webpack_require__){"use strict";__webpack_require__.r(__webpack_exports__),__webpack_require__.d(__webpack_exports__,"actionsData",(function(){return actionsData})),__webpack_require__.d(__webpack_exports__,"Default",(function(){return Default})),__webpack_require__.d(__webpack_exports__,"Pinned",(function(){return Pinned})),__webpack_require__.d(__webpack_exports__,"Archived",(function(){return Archived}));var _storybook_angular__WEBPACK_IMPORTED_MODULE_0__=__webpack_require__(131),_angular_common__WEBPACK_IMPORTED_MODULE_1__=__webpack_require__(16),_storybook_addon_actions__WEBPACK_IMPORTED_MODULE_2__=__webpack_require__(148),_task_component__WEBPACK_IMPORTED_MODULE_3__=__webpack_require__(149);__webpack_exports__.default={component:_task_component__WEBPACK_IMPORTED_MODULE_3__.a,decorators:[Object(_storybook_angular__WEBPACK_IMPORTED_MODULE_0__.moduleMetadata)({declarations:[_task_component__WEBPACK_IMPORTED_MODULE_3__.a],imports:[_angular_common__WEBPACK_IMPORTED_MODULE_1__.a]})],excludeStories:/.*Data$/,title:"Task"};const actionsData={onPinTask:Object(_storybook_addon_actions__WEBPACK_IMPORTED_MODULE_2__.action)("onPinTask"),onArchiveTask:Object(_storybook_addon_actions__WEBPACK_IMPORTED_MODULE_2__.action)("onArchiveTask")},Template=args=>({props:Object.assign(Object.assign({},args),{onPinTask:actionsData.onPinTask,onArchiveTask:actionsData.onArchiveTask})}),Default=Template.bind({});Default.args={task:{id:"1",title:"Test Task",state:"TASK_INBOX",updatedAt:new Date(2021,0,1,9,0)}};const Pinned=Template.bind({});Pinned.args={task:Object.assign(Object.assign({},Default.args.task),{state:"TASK_PINNED"})};const Archived=Template.bind({});Archived.args={task:Object.assign(Object.assign({},Default.args.task),{state:"TASK_ARCHIVED"})},Default.parameters=Object.assign({storySource:{source:"args => ({\r\n  props: {\r\n    ...args,\r\n    onPinTask: actionsData.onPinTask,\r\n    onArchiveTask: actionsData.onArchiveTask,\r\n  },\r\n})"}},Default.parameters),Pinned.parameters=Object.assign({storySource:{source:"args => ({\r\n  props: {\r\n    ...args,\r\n    onPinTask: actionsData.onPinTask,\r\n    onArchiveTask: actionsData.onArchiveTask,\r\n  },\r\n})"}},Pinned.parameters),Archived.parameters=Object.assign({storySource:{source:"args => ({\r\n  props: {\r\n    ...args,\r\n    onPinTask: actionsData.onPinTask,\r\n    onArchiveTask: actionsData.onArchiveTask,\r\n  },\r\n})"}},Archived.parameters)},149:function(module,__webpack_exports__,__webpack_require__){"use strict";__webpack_require__.d(__webpack_exports__,"a",(function(){return TaskComponent}));var tslib__WEBPACK_IMPORTED_MODULE_0__=__webpack_require__(15),_angular_core__WEBPACK_IMPORTED_MODULE_1__=__webpack_require__(0);let TaskComponent=class TaskComponent{constructor(){this.onPinTask=new _angular_core__WEBPACK_IMPORTED_MODULE_1__.EventEmitter,this.onArchiveTask=new _angular_core__WEBPACK_IMPORTED_MODULE_1__.EventEmitter}onPin(id){this.onPinTask.emit(id)}onArchive(id){this.onArchiveTask.emit(id)}};Object(tslib__WEBPACK_IMPORTED_MODULE_0__.a)([Object(_angular_core__WEBPACK_IMPORTED_MODULE_1__.Input)(),Object(tslib__WEBPACK_IMPORTED_MODULE_0__.b)("design:type",Object)],TaskComponent.prototype,"task",void 0),Object(tslib__WEBPACK_IMPORTED_MODULE_0__.a)([Object(_angular_core__WEBPACK_IMPORTED_MODULE_1__.Output)(),Object(tslib__WEBPACK_IMPORTED_MODULE_0__.b)("design:type",Object)],TaskComponent.prototype,"onPinTask",void 0),Object(tslib__WEBPACK_IMPORTED_MODULE_0__.a)([Object(_angular_core__WEBPACK_IMPORTED_MODULE_1__.Output)(),Object(tslib__WEBPACK_IMPORTED_MODULE_0__.b)("design:type",Object)],TaskComponent.prototype,"onArchiveTask",void 0),TaskComponent=Object(tslib__WEBPACK_IMPORTED_MODULE_0__.a)([Object(_angular_core__WEBPACK_IMPORTED_MODULE_1__.Component)({selector:"app-task",template:'\n  <div class="list-item {{ task?.state }}">\n        <label class="checkbox">\n          <input\n            type="checkbox"\n            [defaultChecked]="task?.state === \'TASK_ARCHIVED\'"\n            disabled="true"\n            name="checked"\n          />\n          <span class="checkbox-custom" (click)="onArchive(task.id)"></span>\n        </label>\n        <div class="title">\n          <input\n            type="text"\n            [value]="task?.title"\n            readonly="true"\n            placeholder="Input title"\n          />\n        </div>\n        <div class="actions">\n          <a *ngIf="task?.state !== \'TASK_ARCHIVED\'" (click)="onPin(task.id)">\n            <span class="icon-star"></span>\n          </a>\n        </div>\n     </div>\n  '})],TaskComponent)},222:function(module,__webpack_exports__,__webpack_require__){"use strict";__webpack_require__.d(__webpack_exports__,"a",(function(){return PureTaskListComponent}));var _a,_b,tslib__WEBPACK_IMPORTED_MODULE_0__=__webpack_require__(15),_angular_core__WEBPACK_IMPORTED_MODULE_1__=__webpack_require__(0);let PureTaskListComponent=class PureTaskListComponent{constructor(){this.task=[],this.tasksInOrder=[],this.loading=!1,this.onPinTask=new _angular_core__WEBPACK_IMPORTED_MODULE_1__.EventEmitter,this.onArchiveTask=new _angular_core__WEBPACK_IMPORTED_MODULE_1__.EventEmitter}set tasks(arr){this.tasksInOrder=[...arr.filter(t=>"TASK_PINNED"===t.state),...arr.filter(t=>"TASK_PINNED"!==t.state)]}};Object(tslib__WEBPACK_IMPORTED_MODULE_0__.a)([Object(_angular_core__WEBPACK_IMPORTED_MODULE_1__.Input)(),Object(tslib__WEBPACK_IMPORTED_MODULE_0__.b)("design:type",Array)],PureTaskListComponent.prototype,"task",void 0),Object(tslib__WEBPACK_IMPORTED_MODULE_0__.a)([Object(_angular_core__WEBPACK_IMPORTED_MODULE_1__.Input)(),Object(tslib__WEBPACK_IMPORTED_MODULE_0__.b)("design:type",Object)],PureTaskListComponent.prototype,"loading",void 0),Object(tslib__WEBPACK_IMPORTED_MODULE_0__.a)([Object(_angular_core__WEBPACK_IMPORTED_MODULE_1__.Output)(),Object(tslib__WEBPACK_IMPORTED_MODULE_0__.b)("design:type","function"==typeof(_a=void 0!==_angular_core__WEBPACK_IMPORTED_MODULE_1__.EventEmitter&&_angular_core__WEBPACK_IMPORTED_MODULE_1__.EventEmitter)?_a:Object)],PureTaskListComponent.prototype,"onPinTask",void 0),Object(tslib__WEBPACK_IMPORTED_MODULE_0__.a)([Object(_angular_core__WEBPACK_IMPORTED_MODULE_1__.Output)(),Object(tslib__WEBPACK_IMPORTED_MODULE_0__.b)("design:type","function"==typeof(_b=void 0!==_angular_core__WEBPACK_IMPORTED_MODULE_1__.EventEmitter&&_angular_core__WEBPACK_IMPORTED_MODULE_1__.EventEmitter)?_b:Object)],PureTaskListComponent.prototype,"onArchiveTask",void 0),Object(tslib__WEBPACK_IMPORTED_MODULE_0__.a)([Object(_angular_core__WEBPACK_IMPORTED_MODULE_1__.Input)(),Object(tslib__WEBPACK_IMPORTED_MODULE_0__.b)("design:type",Array),Object(tslib__WEBPACK_IMPORTED_MODULE_0__.b)("design:paramtypes",[Array])],PureTaskListComponent.prototype,"tasks",null),PureTaskListComponent=Object(tslib__WEBPACK_IMPORTED_MODULE_0__.a)([Object(_angular_core__WEBPACK_IMPORTED_MODULE_1__.Component)({selector:"app-pure-task-list",template:'\n    <div class="list-items">\n      <app-task\n        *ngFor="let task of tasksInOrder"\n        [task]="task"\n        (onArchiveTask)="onArchiveTask.emit($event)"\n        (onPinTask)="onPinTask.emit($event)"\n      >\n      </app-task>\n      <div *ngIf="tasksInOrder.length === 0 && !loading" class="wrapper-message">\n        <span class="icon-check"></span>\n        <div class="title-message">You have no tasks</div>\n        <div class="subtitle-message">Sit back and relax</div>\n      </div>\n      <div *ngIf="loading">\n        <div *ngFor="let i of [1, 2, 3, 4, 5, 6]" class="loading-item">\n          <span class="glow-checkbox"></span>\n          <span class="glow-text"> <span>Loading</span> <span>cool</span> <span>state</span> </span>\n        </div>\n      </div>\n    </div>\n  '})],PureTaskListComponent)},357:function(module,__webpack_exports__,__webpack_require__){"use strict";var _node_modules_css_loader_dist_runtime_api_js__WEBPACK_IMPORTED_MODULE_0__=__webpack_require__(528),___CSS_LOADER_EXPORT___=__webpack_require__.n(_node_modules_css_loader_dist_runtime_api_js__WEBPACK_IMPORTED_MODULE_0__)()(!1);___CSS_LOADER_EXPORT___.push([module.i,'/* Reset.less\n * Props to Eric Meyer (meyerweb.com) for his CSS reset file. We\'re using an adapted version here\tthat cuts out some of the reset HTML elements we will never need here (i.e., dfn, samp, etc).\n * ------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------- */\n html,\n body {\n   margin: 0;\n   padding: 0;\n }\n h1,\n h2,\n h3,\n h4,\n h5,\n h6,\n p,\n blockquote,\n pre,\n a,\n abbr,\n acronym,\n address,\n cite,\n code,\n del,\n dfn,\n em,\n img,\n q,\n s,\n samp,\n small,\n strike,\n strong,\n sub,\n sup,\n tt,\n var,\n dd,\n dl,\n dt,\n li,\n ol,\n ul,\n fieldset,\n form,\n label,\n legend,\n button,\n table,\n caption,\n tbody,\n tfoot,\n thead,\n tr,\n th,\n td {\n   margin: 0;\n   padding: 0;\n   border: 0;\n   font-weight: normal;\n   font-style: normal;\n   font-size: 100%;\n   line-height: 1;\n   font-family: inherit;\n }\n table {\n   border-collapse: collapse;\n   border-spacing: 0;\n }\n ol,\n ul {\n   list-style: none;\n }\n q:before,\n q:after,\n blockquote:before,\n blockquote:after {\n   content: "";\n }\n html {\n   font-size: 100%;\n   -webkit-text-size-adjust: 100%;\n   -ms-text-size-adjust: 100%;\n }\n a:focus {\n   outline: thin dotted;\n }\n a:hover,\n a:active {\n   outline: 0;\n }\n article,\n aside,\n details,\n figcaption,\n figure,\n footer,\n header,\n hgroup,\n nav,\n section {\n   display: block;\n }\n audio,\n canvas,\n video {\n   display: inline-block;\n   *display: inline;\n   *zoom: 1;\n }\n audio:not([controls]) {\n   display: none;\n }\n sub,\n sup {\n   font-size: 75%;\n   line-height: 0;\n   position: relative;\n   vertical-align: baseline;\n }\n sup {\n   top: -0.5em;\n }\n sub {\n   bottom: -0.25em;\n }\n img {\n   border: 0;\n   -ms-interpolation-mode: bicubic;\n }\n button,\n input,\n select,\n textarea {\n   font-size: 100%;\n   margin: 0;\n   vertical-align: baseline;\n   *vertical-align: middle;\n }\n button,\n input {\n   line-height: normal;\n   *overflow: visible;\n }\n button::-moz-focus-inner,\n input::-moz-focus-inner {\n   border: 0;\n   padding: 0;\n }\n button,\n input[type="button"],\n input[type="reset"],\n input[type="submit"] {\n   cursor: pointer;\n   -webkit-appearance: button;\n }\n input[type="search"] {\n   -webkit-appearance: textfield;\n   box-sizing: content-box;\n }\n input[type="search"]::-webkit-search-decoration {\n   -webkit-appearance: none;\n }\n textarea {\n   overflow: auto;\n   vertical-align: top;\n }\n @keyframes spin {\n   0% {\n     transform: rotate(0deg);\n   }\n   100% {\n     transform: rotate(359deg);\n   }\n }\n @keyframes glow {\n   0%,\n   100% {\n     opacity: 1;\n   }\n   50% {\n     opacity: 0.5;\n   }\n }\n @font-face {\n   font-family: \'Nunito Sans\';\n   font-style: italic;\n   font-weight: 400;\n   src: url(https://fonts.gstatic.com/s/nunitosans/v6/pe0oMImSLYBIv1o4X1M8cce4E9lKcw.ttf) format(\'truetype\');\n }\n @font-face {\n   font-family: \'Nunito Sans\';\n   font-style: normal;\n   font-weight: 400;\n   src: url(https://fonts.gstatic.com/s/nunitosans/v6/pe0qMImSLYBIv1o4X1M8cce9I94.ttf) format(\'truetype\');\n }\n @font-face {\n   font-family: \'Nunito Sans\';\n   font-style: normal;\n   font-weight: 800;\n   src: url(https://fonts.gstatic.com/s/nunitosans/v6/pe03MImSLYBIv1o4X1M8cc8aBc5tU1Q.ttf) format(\'truetype\');\n }\n .force-wrap {\n   word-wrap: break-word;\n   word-break: break-all;\n   -ms-word-break: break-all;\n   word-break: break-word;\n   -webkit-hyphens: auto;\n           hyphens: auto;\n }\n .type-light {\n   font-family: \'Nunito Sans\', "Helvetica Neue", Helvetica, Arial, sans-serif;\n   font-weight: 300;\n }\n .type-bold {\n   font-family: \'Nunito Sans\', "Helvetica Neue", Helvetica, Arial, sans-serif;\n   font-weight: 800;\n }\n .type-italic {\n   font-family: \'Nunito Sans\', "Helvetica Neue", Helvetica, Arial, sans-serif;\n   font-weight: 400;\n   font-style: italic;\n }\n * {\n   box-sizing: border-box;\n   -webkit-tap-highlight-color: rgba(0, 0, 0, 0);\n   -webkit-tap-highlight-color: transparent;\n }\n html,\n button,\n input,\n textarea,\n select {\n   outline: none;\n   -webkit-font-smoothing: antialiased;\n   -moz-osx-font-smoothing: grayscale;\n }\n body {\n   font-family: \'Nunito Sans\', "Helvetica Neue", Helvetica, Arial, sans-serif;\n   font-style: 400;\n   color: #333;\n   font-size: 16px;\n   background-color: #26c6da;\n }\n h1,\n h2,\n h3,\n h4,\n h5,\n h6 {\n   font-family: \'Nunito Sans\', "Helvetica Neue", Helvetica, Arial, sans-serif;\n   font-style: 400;\n   margin: 0;\n   padding: 0;\n }\n h1 {\n   font-size: 40px;\n   line-height: 48px;\n }\n h2 {\n   font-size: 28px;\n   line-height: 32px;\n }\n h3 {\n   font-size: 24px;\n   line-height: 28px;\n }\n h4 {\n   font-size: 20px;\n   line-height: 24px;\n }\n h5 {\n   font-size: 14px;\n   line-height: 20px;\n   color: #ccc;\n   text-transform: uppercase;\n }\n h6 {\n   color: #aaa;\n }\n p {\n   font-size: 16px;\n   line-height: 24px;\n }\n sub,\n sup {\n   font-size: 0.8em;\n }\n sub {\n   bottom: -0.2em;\n }\n sup {\n   top: -0.2em;\n }\n b {\n   font-weight: bold;\n }\n em {\n   font-style: italic;\n }\n input[type="text"],\n input[type="email"],\n input[type="password"],\n textarea {\n   font-size: 14px;\n   line-height: 20px;\n   font-family: \'Nunito Sans\', "Helvetica Neue", Helvetica, Arial, sans-serif;\n   font-style: 400;\n   padding: 0.75rem 0;\n   line-height: 1.5rem !important;\n   border: none;\n   border-radius: 0;\n   box-sizing: border-box;\n   color: #333;\n   outline: none;\n }\n input[type="text"] ::placeholder,\n input[type="email"] ::placeholder,\n input[type="password"] ::placeholder,\n textarea ::placeholder {\n   color: #778b91;\n }\n input[type="text"][disabled],\n input[type="email"][disabled],\n input[type="password"][disabled],\n textarea[disabled] {\n   opacity: 0.5;\n }\n input:-webkit-autofill {\n   -webkit-box-shadow: 0 0 0 1000px white inset;\n }\n .checkbox {\n   display: inline-block;\n   height: 3rem;\n   position: relative;\n   vertical-align: middle;\n   width: 44px;\n }\n .checkbox input[type="checkbox"] {\n   font-size: 1em;\n   visibility: hidden;\n }\n .checkbox input[type="checkbox"] + span:before {\n   position: absolute;\n   top: 50%;\n   right: auto;\n   bottom: auto;\n   left: 50%;\n   width: 0.85em;\n   height: 0.85em;\n   transform: translate3d(-50%, -50%, 0);\n   background: transparent;\n   box-shadow: #2cc5d2 0 0 0 1px inset;\n   content: \'\';\n   display: block;\n }\n .checkbox input[type="checkbox"]:checked + span:before {\n   font-size: 16px;\n   line-height: 24px;\n   box-shadow: none;\n   color: #2cc5d2;\n   margin-top: -1px;\n   font-family: \'percolate\';\n   speak: none;\n   font-style: normal;\n   font-weight: normal;\n   font-variant: normal;\n   text-transform: none;\n   line-height: 1;\n   -webkit-font-smoothing: antialiased;\n   -moz-osx-font-smoothing: grayscale;\n   content: "\\e65e";\n }\n .input-symbol {\n   display: inline-block;\n   position: relative;\n }\n .input-symbol.error [class^="icon-"],\n .input-symbol.error [class*=" icon-"] {\n   color: #ff4400;\n }\n .input-symbol [class^="icon-"],\n .input-symbol [class*=" icon-"] {\n   left: 1em;\n }\n .input-symbol input {\n   padding-left: 3em;\n }\n .input-symbol input {\n   width: 100%;\n }\n .input-symbol input:focus + [class^="icon-"],\n .input-symbol input:focus + [class*=" icon-"] {\n   color: #2cc5d2;\n }\n .input-symbol [class^="icon-"],\n .input-symbol [class*=" icon-"] {\n   transition: all 300ms ease-in;\n   transform: translate3d(0, -50%, 0);\n   background: transparent;\n   color: #aaa;\n   font-size: 1em;\n   height: 1em;\n   position: absolute;\n   top: 50%;\n   width: 1em;\n }\n @font-face {\n   font-family: "percolate";\n   src: url(\'percolate.eot?-5w3um4\');\n   src: url(\'percolate.eot?#iefix5w3um4\') format("embedded-opentype"),\n     url(\'percolate.woff?5w3um4\') format("woff"),\n     url(\'percolate.ttf?5w3um4\') format("truetype"),\n     url(\'percolate.svg?5w3um4\') format("svg");\n   font-weight: normal;\n   font-style: normal;\n }\n [class^="icon-"],\n [class*=" icon-"] {\n   font-family: "percolate";\n   speak: none;\n   font-style: normal;\n   font-weight: normal;\n   font-variant: normal;\n   text-transform: none;\n   line-height: 1;\n   /* Better Font Rendering =========== */\n   -webkit-font-smoothing: antialiased;\n   -moz-osx-font-smoothing: grayscale;\n }\n .icon-graphql:before {\n   content: "\\e90a";\n }\n .icon-redux:before {\n   content: "\\e908";\n }\n .icon-grid:before {\n   content: "\\e909";\n }\n .icon-redirect:before {\n   content: "\\e907";\n }\n .icon-grow:before {\n   content: "\\e903";\n }\n .icon-lightning:before {\n   content: "\\e904";\n }\n .icon-request-change:before {\n   content: "\\e905";\n }\n .icon-transfer:before {\n   content: "\\e906";\n }\n .icon-calendar:before {\n   content: "\\e902";\n }\n .icon-sidebar:before {\n   content: "\\e900";\n }\n .icon-tablet:before {\n   content: "\\e901";\n }\n .icon-atmosphere:before {\n   content: "\\e671";\n }\n .icon-browser:before {\n   content: "\\e672";\n }\n .icon-database:before {\n   content: "\\e673";\n }\n .icon-expand-alt:before {\n   content: "\\e674";\n }\n .icon-mobile:before {\n   content: "\\e675";\n }\n .icon-watch:before {\n   content: "\\e676";\n }\n .icon-home:before {\n   content: "\\e600";\n }\n .icon-user-alt:before {\n   content: "\\e601";\n }\n .icon-user:before {\n   content: "\\e602";\n }\n .icon-user-add:before {\n   content: "\\e603";\n }\n .icon-users:before {\n   content: "\\e604";\n }\n .icon-profile:before {\n   content: "\\e605";\n }\n .icon-bookmark:before {\n   content: "\\e606";\n }\n .icon-bookmark-hollow:before {\n   content: "\\e607";\n }\n .icon-star:before {\n   content: "\\e608";\n }\n .icon-star-hollow:before {\n   content: "\\e609";\n }\n .icon-circle:before {\n   content: "\\e60a";\n }\n .icon-circle-hollow:before {\n   content: "\\e60b";\n }\n .icon-heart:before {\n   content: "\\e60c";\n }\n .icon-heart-hollow:before {\n   content: "\\e60d";\n }\n .icon-face-happy:before {\n   content: "\\e60e";\n }\n .icon-face-sad:before {\n   content: "\\e60f";\n }\n .icon-face-neutral:before {\n   content: "\\e610";\n }\n .icon-lock:before {\n   content: "\\e611";\n }\n .icon-unlock:before {\n   content: "\\e612";\n }\n .icon-key:before {\n   content: "\\e613";\n }\n .icon-arrow-left-alt:before {\n   content: "\\e614";\n }\n .icon-arrow-right-alt:before {\n   content: "\\e615";\n }\n .icon-sync:before {\n   content: "\\e616";\n }\n .icon-reply:before {\n   content: "\\e617";\n }\n .icon-expand:before {\n   content: "\\e618";\n }\n .icon-arrow-left:before {\n   content: "\\e619";\n }\n .icon-arrow-up:before {\n   content: "\\e61a";\n }\n .icon-arrow-down:before {\n   content: "\\e61b";\n }\n .icon-arrow-right:before {\n   content: "\\e61c";\n }\n .icon-chevron-down:before {\n   content: "\\e61d";\n }\n .icon-back:before {\n   content: "\\e61e";\n }\n .icon-download:before {\n   content: "\\e61f";\n }\n .icon-upload:before {\n   content: "\\e620";\n }\n .icon-proceed:before {\n   content: "\\e621";\n }\n .icon-info:before {\n   content: "\\e622";\n }\n .icon-question:before {\n   content: "\\e623";\n }\n .icon-alert:before {\n   content: "\\e624";\n }\n .icon-edit:before {\n   content: "\\e625";\n }\n .icon-paintbrush:before {\n   content: "\\e626";\n }\n .icon-close:before {\n   content: "\\e627";\n }\n .icon-trash:before {\n   content: "\\e628";\n }\n .icon-cross:before {\n   content: "\\e629";\n }\n .icon-delete:before {\n   content: "\\e62a";\n }\n .icon-power:before {\n   content: "\\e62b";\n }\n .icon-add:before {\n   content: "\\e62c";\n }\n .icon-plus:before {\n   content: "\\e62d";\n }\n .icon-document:before {\n   content: "\\e62e";\n }\n .icon-graph-line:before {\n   content: "\\e62f";\n }\n .icon-doc-chart:before {\n   content: "\\e630";\n }\n .icon-doc-list:before {\n   content: "\\e631";\n }\n .icon-category:before {\n   content: "\\e632";\n }\n .icon-copy:before {\n   content: "\\e633";\n }\n .icon-book:before {\n   content: "\\e634";\n }\n .icon-certificate:before {\n   content: "\\e636";\n }\n .icon-print:before {\n   content: "\\e637";\n }\n .icon-list-unordered:before {\n   content: "\\e638";\n }\n .icon-graph-bar:before {\n   content: "\\e639";\n }\n .icon-menu:before {\n   content: "\\e63a";\n }\n .icon-filter:before {\n   content: "\\e63b";\n }\n .icon-ellipsis:before {\n   content: "\\e63c";\n }\n .icon-cog:before {\n   content: "\\e63d";\n }\n .icon-wrench:before {\n   content: "\\e63e";\n }\n .icon-nut:before {\n   content: "\\e63f";\n }\n .icon-camera:before {\n   content: "\\e640";\n }\n .icon-eye:before {\n   content: "\\e641";\n }\n .icon-photo:before {\n   content: "\\e642";\n }\n .icon-video:before {\n   content: "\\e643";\n }\n .icon-speaker:before {\n   content: "\\e644";\n }\n .icon-phone:before {\n   content: "\\e645";\n }\n .icon-flag:before {\n   content: "\\e646";\n }\n .icon-pin:before {\n   content: "\\e647";\n }\n .icon-compass:before {\n   content: "\\e648";\n }\n .icon-globe:before {\n   content: "\\e649";\n }\n .icon-location:before {\n   content: "\\e64a";\n }\n .icon-search:before {\n   content: "\\e64b";\n }\n .icon-timer:before {\n   content: "\\e64c";\n }\n .icon-time:before {\n   content: "\\e64d";\n }\n .icon-dashboard:before {\n   content: "\\e64e";\n }\n .icon-hourglass:before {\n   content: "\\e64f";\n }\n .icon-play:before {\n   content: "\\e650";\n }\n .icon-stop:before {\n   content: "\\e651";\n }\n .icon-email:before {\n   content: "\\e652";\n }\n .icon-comment:before {\n   content: "\\e653";\n }\n .icon-link:before {\n   content: "\\e654";\n }\n .icon-paperclip:before {\n   content: "\\e655";\n }\n .icon-box:before {\n   content: "\\e656";\n }\n .icon-structure:before {\n   content: "\\e657";\n }\n .icon-commit:before {\n   content: "\\e658";\n }\n .icon-cpu:before {\n   content: "\\e659";\n }\n .icon-memory:before {\n   content: "\\e65a";\n }\n .icon-outbox:before {\n   content: "\\e65b";\n }\n .icon-share:before {\n   content: "\\e65c";\n }\n .icon-button:before {\n   content: "\\e65d";\n }\n .icon-check:before {\n   content: "\\e65e";\n }\n .icon-form:before {\n   content: "\\e65f";\n }\n .icon-admin:before {\n   content: "\\e660";\n }\n .icon-paragraph:before {\n   content: "\\e661";\n }\n .icon-bell:before {\n   content: "\\e662";\n }\n .icon-rss:before {\n   content: "\\e663";\n }\n .icon-basket:before {\n   content: "\\e664";\n }\n .icon-credit:before {\n   content: "\\e665";\n }\n .icon-support:before {\n   content: "\\e666";\n }\n .icon-shield:before {\n   content: "\\e667";\n }\n .icon-beaker:before {\n   content: "\\e668";\n }\n .icon-google:before {\n   content: "\\e669";\n }\n .icon-gdrive:before {\n   content: "\\e66a";\n }\n .icon-youtube:before {\n   content: "\\e66b";\n }\n .icon-facebook:before {\n   content: "\\e66c";\n }\n .icon-thumbs-up:before {\n   content: "\\e66d";\n }\n .icon-twitter:before {\n   content: "\\e66e";\n }\n .icon-github:before {\n   content: "\\e66f";\n }\n .icon-meteor:before {\n   content: "\\e670";\n }\n a {\n   transition: all 200ms ease-in;\n   color: #5db9ff;\n   cursor: pointer;\n   text-decoration: none;\n }\n a:hover {\n   color: #239da8;\n }\n a:active {\n   color: #555;\n }\n a:focus {\n   outline: none;\n }\n .list-heading {\n   letter-spacing: 0.3em;\n   text-indent: 0.3em;\n   text-transform: uppercase;\n   font-family: \'Nunito Sans\', "Helvetica Neue", Helvetica, Arial, sans-serif;\n   font-weight: 800;\n   font-size: 11px;\n   padding-left: 15px;\n   line-height: 40px;\n   background: #f8f8f8;\n   color: #aaa;\n }\n .list-heading .icon-sync {\n   opacity: 1;\n   animation: spin 2s infinite linear;\n   display: inline-block;\n   margin-right: 4px;\n }\n .list-item {\n   font-size: 14px;\n   line-height: 20px;\n   display: flex;\n   flex-wrap: wrap;\n   height: 3rem;\n   width: 100%;\n   background: white;\n   transition: all ease-out 150ms;\n }\n .list-item .title {\n   overflow: hidden;\n   text-overflow: ellipsis;\n   white-space: nowrap;\n   flex: 1;\n }\n .list-item input[type="text"] {\n   background: transparent;\n   width: 100%;\n }\n .list-item input[type="text"]:focus {\n   cursor: text;\n }\n .list-item .actions {\n   transition: all 200ms ease-in;\n   padding-right: 20px;\n }\n .list-item .actions a {\n   display: inline-block;\n   vertical-align: top;\n   text-align: center;\n   color: #eee;\n }\n .list-item .actions a:hover {\n   color: #2cc5d2;\n }\n .list-item .actions a:active {\n   color: #555;\n }\n .list-item .actions [class^="icon-"] {\n   font-size: 16px;\n   line-height: 24px;\n   line-height: 3rem;\n   text-align: center;\n }\n .list-item.TASK_PINNED .icon-star {\n   color: #2cc5d2;\n }\n .list-item.TASK_ARCHIVED input[type="text"] {\n   color: #aaa;\n }\n .list-item:hover {\n   background-image: linear-gradient(to bottom, #e5f9f7 0%, #f0fffd 100%);\n }\n .list-item:hover .checkbox {\n   cursor: pointer;\n }\n .list-item + .list-item {\n   border-top: 1px solid #f0f9fb;\n }\n .list-item.checked input[type="text"] {\n   color: #ccc;\n   text-decoration: line-through;\n }\n .list-item.checked .delete-item {\n   display: inline-block;\n }\n .loading-item {\n   height: 3rem;\n   width: 100%;\n   background: white;\n   display: flex;\n   align-items: center;\n   line-height: 1rem;\n   padding-left: 16px;\n }\n .loading-item .glow-checkbox,\n .loading-item .glow-text span {\n   animation: glow 1.5s ease-in-out infinite;\n   background: #eee;\n   color: transparent;\n   cursor: progress;\n   display: inline-block;\n }\n .loading-item .glow-checkbox {\n   margin-right: 16px;\n   width: 12px;\n   height: 12px;\n }\n .loading-item + .loading-item {\n   border-top: 1px solid #f0f9fb;\n }\n .list-items {\n   position: relative;\n   background: white;\n   min-height: 288px;\n }\n .list-items .select-placeholder {\n   border: none;\n   width: 48px;\n }\n .wrapper-message {\n   position: absolute;\n   top: 45%;\n   right: 0;\n   bottom: auto;\n   left: 0;\n   width: auto;\n   height: auto;\n   transform: translate3d(0, -50%, 0);\n   text-align: center;\n }\n .wrapper-message [class^="icon-"],\n .wrapper-message [class*=" icon-"] {\n   font-size: 48px;\n   line-height: 56px;\n   color: #2cc5d2;\n   display: block;\n }\n .wrapper-message .title-message {\n   font-size: 16px;\n   line-height: 24px;\n   font-family: \'Nunito Sans\', "Helvetica Neue", Helvetica, Arial, sans-serif;\n   font-weight: 800;\n   color: #555;\n }\n .wrapper-message .subtitle-message {\n   font-size: 14px;\n   line-height: 20px;\n   color: #666;\n }\n .page.lists-show {\n   min-height: 100vh;\n   background: white;\n }\n .page.lists-show nav {\n   background: #d3edf4;\n   padding: 1.5rem 1.25rem;\n   text-align: center;\n }\n @media screen and (min-width: 40em) {\n   .page.lists-show nav {\n     text-align: left;\n   }\n }\n .page.lists-show nav .title-page {\n   font-size: 20px;\n   line-height: 24px;\n   line-height: 2rem;\n   cursor: pointer;\n   white-space: nowrap;\n }\n .page.lists-show nav .title-page .title-wrapper {\n   overflow: hidden;\n   text-overflow: ellipsis;\n   white-space: nowrap;\n   font-family: \'Nunito Sans\', "Helvetica Neue", Helvetica, Arial, sans-serif;\n   font-weight: 800;\n   color: #1c3f53;\n   display: inline-block;\n   vertical-align: top;\n   max-width: 100%;\n }',""]),__webpack_exports__.a=___CSS_LOADER_EXPORT___},460:function(module,exports){function webpackEmptyAsyncContext(req){return Promise.resolve().then((function(){var e=new Error("Cannot find module '"+req+"'");throw e.code="MODULE_NOT_FOUND",e}))}webpackEmptyAsyncContext.keys=function(){return[]},webpackEmptyAsyncContext.resolve=webpackEmptyAsyncContext,module.exports=webpackEmptyAsyncContext,webpackEmptyAsyncContext.id=460},526:function(module){module.exports=JSON.parse('{"pipes":[],"interfaces":[{"name":"Task","id":"interface-Task-0136f9ce0279af1639d6f793980c7695","file":"src/app/models/task.model.ts","type":"interface","sourceCode":"export interface Task {\\r\\n    id: string;\\r\\n    title: string;\\r\\n    state: string;\\r\\n  }","properties":[{"name":"id","type":"string","optional":false,"description":"","line":2},{"name":"state","type":"string","optional":false,"description":"","line":4},{"name":"title","type":"string","optional":false,"description":"","line":3}],"indexSignatures":[],"kind":150,"methods":[]}],"injectables":[],"classes":[{"name":"AppError","id":"class-AppError-8fcbd930b9a660e85cca6f7baa2d165b","file":"src/app/state/task.state.ts","type":"class","sourceCode":"import { State, Selector, Action, StateContext } from \'@ngxs/store\';\\r\\nimport { Task } from \'../models/task.model\';\\r\\n\\r\\n// Defines the actions available to the app\\r\\nexport const actions = {\\r\\n  ARCHIVE_TASK: \'ARCHIVE_TASK\',\\r\\n  PIN_TASK: \'PIN_TASK\',\\r\\n  ERROR: \'APP_ERROR\'\\r\\n};\\r\\n\\r\\nexport class ArchiveTask {\\r\\n  static readonly type = actions.ARCHIVE_TASK;\\r\\n\\r\\n  constructor(public payload: string) {}\\r\\n}\\r\\n\\r\\n// The class definition for our error field\\r\\nexport class AppError {\\r\\n  static readonly type = actions.ERROR;\\r\\n  constructor(public payload: boolean) {}\\r\\n}\\r\\n\\r\\nexport class PinTask {\\r\\n  static readonly type = actions.PIN_TASK;\\r\\n\\r\\n  constructor(public payload: string) {}\\r\\n}\\r\\n\\r\\n// The initial state of our store when the app loads.\\r\\n// Usually you would fetch this from a server\\r\\nconst defaultTasks = {\\r\\n  1: { id: \'1\', title: \'Something\', state: \'TASK_INBOX\' },\\r\\n  2: { id: \'2\', title: \'Something more\', state: \'TASK_INBOX\' },\\r\\n  3: { id: \'3\', title: \'Something else\', state: \'TASK_INBOX\' },\\r\\n  4: { id: \'4\', title: \'Something again\', state: \'TASK_INBOX\' },\\r\\n};\\r\\n\\r\\nexport class TaskStateModel {\\r\\n  entities: { [id: number]: Task };\\r\\n  error: boolean;\\r\\n}\\r\\n\\r\\n// Sets the default state\\r\\n@State<TaskStateModel>({\\r\\n  name: \'tasks\',\\r\\n  defaults: {\\r\\n    entities: defaultTasks,\\r\\n    error: false,\\r\\n  },\\r\\n})\\r\\nexport class TasksState {\\r\\n  @Selector()\\r\\n  static getAllTasks(state: TaskStateModel) {\\r\\n    const entities = state.entities;\\r\\n    return Object.keys(entities).map(id => entities[+id]);\\r\\n  }\\r\\n\\r\\n// Defines a new selector for the error field\\r\\n@Selector()\\r\\nstatic getError(state: TaskStateModel) {\\r\\n   const { error } = state;\\r\\n   return error;\\r\\n}\\r\\n\\r\\n  // Triggers the PinTask action, similar to redux\\r\\n  @Action(PinTask)\\r\\n  pinTask({ patchState, getState }: StateContext<TaskStateModel>, { payload }: PinTask) {\\r\\n    const state = getState().entities;\\r\\n\\r\\n    const entities = {\\r\\n      ...state,\\r\\n      [payload]: { ...state[payload], state: \'TASK_PINNED\' },\\r\\n    };\\r\\n\\r\\n    patchState({\\r\\n      entities,\\r\\n    });\\r\\n  }\\r\\n  // Triggers the archiveTask action, similar to redux\\r\\n  @Action(ArchiveTask)\\r\\n  archiveTask({ patchState, getState }: StateContext<TaskStateModel>, { payload }: ArchiveTask) {\\r\\n    const state = getState().entities;\\r\\n\\r\\n    const entities = {\\r\\n      ...state,\\r\\n      [payload]: { ...state[payload], state: \'TASK_ARCHIVED\' },\\r\\n    };\\r\\n\\r\\n    patchState({\\r\\n      entities,\\r\\n    });\\r\\n  }\\r\\n\\r\\n  // Function to handle how the state should be updated when the action is triggered\\r\\n @Action(AppError)\\r\\n setAppError({ patchState, getState }: StateContext<TaskStateModel>, { payload }: AppError) {\\r\\n   const state = getState();\\r\\n   patchState({\\r\\n     error: !state.error,\\r\\n   });\\r\\n  }\\r\\n}\\r\\n","constructorObj":{"name":"constructor","description":"","args":[{"name":"payload","type":"boolean"}],"line":19,"jsdoctags":[{"name":"payload","type":"boolean","tagName":{"text":"param"}}]},"properties":[{"name":"payload","type":"boolean","optional":false,"description":"","line":20,"modifierKind":[114]},{"name":"type","defaultValue":"actions.ERROR","type":"","optional":false,"description":"","line":19,"modifierKind":[115,132]}],"methods":[],"indexSignatures":[],"inputsClass":[],"outputsClass":[],"hostBindings":[],"hostListeners":[]},{"name":"ArchiveTask","id":"class-ArchiveTask-8fcbd930b9a660e85cca6f7baa2d165b","file":"src/app/state/task.state.ts","type":"class","sourceCode":"import { State, Selector, Action, StateContext } from \'@ngxs/store\';\\r\\nimport { Task } from \'../models/task.model\';\\r\\n\\r\\n// Defines the actions available to the app\\r\\nexport const actions = {\\r\\n  ARCHIVE_TASK: \'ARCHIVE_TASK\',\\r\\n  PIN_TASK: \'PIN_TASK\',\\r\\n  ERROR: \'APP_ERROR\'\\r\\n};\\r\\n\\r\\nexport class ArchiveTask {\\r\\n  static readonly type = actions.ARCHIVE_TASK;\\r\\n\\r\\n  constructor(public payload: string) {}\\r\\n}\\r\\n\\r\\n// The class definition for our error field\\r\\nexport class AppError {\\r\\n  static readonly type = actions.ERROR;\\r\\n  constructor(public payload: boolean) {}\\r\\n}\\r\\n\\r\\nexport class PinTask {\\r\\n  static readonly type = actions.PIN_TASK;\\r\\n\\r\\n  constructor(public payload: string) {}\\r\\n}\\r\\n\\r\\n// The initial state of our store when the app loads.\\r\\n// Usually you would fetch this from a server\\r\\nconst defaultTasks = {\\r\\n  1: { id: \'1\', title: \'Something\', state: \'TASK_INBOX\' },\\r\\n  2: { id: \'2\', title: \'Something more\', state: \'TASK_INBOX\' },\\r\\n  3: { id: \'3\', title: \'Something else\', state: \'TASK_INBOX\' },\\r\\n  4: { id: \'4\', title: \'Something again\', state: \'TASK_INBOX\' },\\r\\n};\\r\\n\\r\\nexport class TaskStateModel {\\r\\n  entities: { [id: number]: Task };\\r\\n  error: boolean;\\r\\n}\\r\\n\\r\\n// Sets the default state\\r\\n@State<TaskStateModel>({\\r\\n  name: \'tasks\',\\r\\n  defaults: {\\r\\n    entities: defaultTasks,\\r\\n    error: false,\\r\\n  },\\r\\n})\\r\\nexport class TasksState {\\r\\n  @Selector()\\r\\n  static getAllTasks(state: TaskStateModel) {\\r\\n    const entities = state.entities;\\r\\n    return Object.keys(entities).map(id => entities[+id]);\\r\\n  }\\r\\n\\r\\n// Defines a new selector for the error field\\r\\n@Selector()\\r\\nstatic getError(state: TaskStateModel) {\\r\\n   const { error } = state;\\r\\n   return error;\\r\\n}\\r\\n\\r\\n  // Triggers the PinTask action, similar to redux\\r\\n  @Action(PinTask)\\r\\n  pinTask({ patchState, getState }: StateContext<TaskStateModel>, { payload }: PinTask) {\\r\\n    const state = getState().entities;\\r\\n\\r\\n    const entities = {\\r\\n      ...state,\\r\\n      [payload]: { ...state[payload], state: \'TASK_PINNED\' },\\r\\n    };\\r\\n\\r\\n    patchState({\\r\\n      entities,\\r\\n    });\\r\\n  }\\r\\n  // Triggers the archiveTask action, similar to redux\\r\\n  @Action(ArchiveTask)\\r\\n  archiveTask({ patchState, getState }: StateContext<TaskStateModel>, { payload }: ArchiveTask) {\\r\\n    const state = getState().entities;\\r\\n\\r\\n    const entities = {\\r\\n      ...state,\\r\\n      [payload]: { ...state[payload], state: \'TASK_ARCHIVED\' },\\r\\n    };\\r\\n\\r\\n    patchState({\\r\\n      entities,\\r\\n    });\\r\\n  }\\r\\n\\r\\n  // Function to handle how the state should be updated when the action is triggered\\r\\n @Action(AppError)\\r\\n setAppError({ patchState, getState }: StateContext<TaskStateModel>, { payload }: AppError) {\\r\\n   const state = getState();\\r\\n   patchState({\\r\\n     error: !state.error,\\r\\n   });\\r\\n  }\\r\\n}\\r\\n","constructorObj":{"name":"constructor","description":"","args":[{"name":"payload","type":"string"}],"line":12,"jsdoctags":[{"name":"payload","type":"string","tagName":{"text":"param"}}]},"properties":[{"name":"payload","type":"string","optional":false,"description":"","line":14,"modifierKind":[114]},{"name":"type","defaultValue":"actions.ARCHIVE_TASK","type":"","optional":false,"description":"","line":12,"modifierKind":[115,132]}],"methods":[],"indexSignatures":[],"inputsClass":[],"outputsClass":[],"hostBindings":[],"hostListeners":[]},{"name":"PinTask","id":"class-PinTask-8fcbd930b9a660e85cca6f7baa2d165b","file":"src/app/state/task.state.ts","type":"class","sourceCode":"import { State, Selector, Action, StateContext } from \'@ngxs/store\';\\r\\nimport { Task } from \'../models/task.model\';\\r\\n\\r\\n// Defines the actions available to the app\\r\\nexport const actions = {\\r\\n  ARCHIVE_TASK: \'ARCHIVE_TASK\',\\r\\n  PIN_TASK: \'PIN_TASK\',\\r\\n  ERROR: \'APP_ERROR\'\\r\\n};\\r\\n\\r\\nexport class ArchiveTask {\\r\\n  static readonly type = actions.ARCHIVE_TASK;\\r\\n\\r\\n  constructor(public payload: string) {}\\r\\n}\\r\\n\\r\\n// The class definition for our error field\\r\\nexport class AppError {\\r\\n  static readonly type = actions.ERROR;\\r\\n  constructor(public payload: boolean) {}\\r\\n}\\r\\n\\r\\nexport class PinTask {\\r\\n  static readonly type = actions.PIN_TASK;\\r\\n\\r\\n  constructor(public payload: string) {}\\r\\n}\\r\\n\\r\\n// The initial state of our store when the app loads.\\r\\n// Usually you would fetch this from a server\\r\\nconst defaultTasks = {\\r\\n  1: { id: \'1\', title: \'Something\', state: \'TASK_INBOX\' },\\r\\n  2: { id: \'2\', title: \'Something more\', state: \'TASK_INBOX\' },\\r\\n  3: { id: \'3\', title: \'Something else\', state: \'TASK_INBOX\' },\\r\\n  4: { id: \'4\', title: \'Something again\', state: \'TASK_INBOX\' },\\r\\n};\\r\\n\\r\\nexport class TaskStateModel {\\r\\n  entities: { [id: number]: Task };\\r\\n  error: boolean;\\r\\n}\\r\\n\\r\\n// Sets the default state\\r\\n@State<TaskStateModel>({\\r\\n  name: \'tasks\',\\r\\n  defaults: {\\r\\n    entities: defaultTasks,\\r\\n    error: false,\\r\\n  },\\r\\n})\\r\\nexport class TasksState {\\r\\n  @Selector()\\r\\n  static getAllTasks(state: TaskStateModel) {\\r\\n    const entities = state.entities;\\r\\n    return Object.keys(entities).map(id => entities[+id]);\\r\\n  }\\r\\n\\r\\n// Defines a new selector for the error field\\r\\n@Selector()\\r\\nstatic getError(state: TaskStateModel) {\\r\\n   const { error } = state;\\r\\n   return error;\\r\\n}\\r\\n\\r\\n  // Triggers the PinTask action, similar to redux\\r\\n  @Action(PinTask)\\r\\n  pinTask({ patchState, getState }: StateContext<TaskStateModel>, { payload }: PinTask) {\\r\\n    const state = getState().entities;\\r\\n\\r\\n    const entities = {\\r\\n      ...state,\\r\\n      [payload]: { ...state[payload], state: \'TASK_PINNED\' },\\r\\n    };\\r\\n\\r\\n    patchState({\\r\\n      entities,\\r\\n    });\\r\\n  }\\r\\n  // Triggers the archiveTask action, similar to redux\\r\\n  @Action(ArchiveTask)\\r\\n  archiveTask({ patchState, getState }: StateContext<TaskStateModel>, { payload }: ArchiveTask) {\\r\\n    const state = getState().entities;\\r\\n\\r\\n    const entities = {\\r\\n      ...state,\\r\\n      [payload]: { ...state[payload], state: \'TASK_ARCHIVED\' },\\r\\n    };\\r\\n\\r\\n    patchState({\\r\\n      entities,\\r\\n    });\\r\\n  }\\r\\n\\r\\n  // Function to handle how the state should be updated when the action is triggered\\r\\n @Action(AppError)\\r\\n setAppError({ patchState, getState }: StateContext<TaskStateModel>, { payload }: AppError) {\\r\\n   const state = getState();\\r\\n   patchState({\\r\\n     error: !state.error,\\r\\n   });\\r\\n  }\\r\\n}\\r\\n","constructorObj":{"name":"constructor","description":"","args":[{"name":"payload","type":"string"}],"line":24,"jsdoctags":[{"name":"payload","type":"string","tagName":{"text":"param"}}]},"properties":[{"name":"payload","type":"string","optional":false,"description":"","line":26,"modifierKind":[114]},{"name":"type","defaultValue":"actions.PIN_TASK","type":"","optional":false,"description":"","line":24,"modifierKind":[115,132]}],"methods":[],"indexSignatures":[],"inputsClass":[],"outputsClass":[],"hostBindings":[],"hostListeners":[]},{"name":"TasksState","id":"class-TasksState-8fcbd930b9a660e85cca6f7baa2d165b","file":"src/app/state/task.state.ts","type":"class","sourceCode":"import { State, Selector, Action, StateContext } from \'@ngxs/store\';\\r\\nimport { Task } from \'../models/task.model\';\\r\\n\\r\\n// Defines the actions available to the app\\r\\nexport const actions = {\\r\\n  ARCHIVE_TASK: \'ARCHIVE_TASK\',\\r\\n  PIN_TASK: \'PIN_TASK\',\\r\\n  ERROR: \'APP_ERROR\'\\r\\n};\\r\\n\\r\\nexport class ArchiveTask {\\r\\n  static readonly type = actions.ARCHIVE_TASK;\\r\\n\\r\\n  constructor(public payload: string) {}\\r\\n}\\r\\n\\r\\n// The class definition for our error field\\r\\nexport class AppError {\\r\\n  static readonly type = actions.ERROR;\\r\\n  constructor(public payload: boolean) {}\\r\\n}\\r\\n\\r\\nexport class PinTask {\\r\\n  static readonly type = actions.PIN_TASK;\\r\\n\\r\\n  constructor(public payload: string) {}\\r\\n}\\r\\n\\r\\n// The initial state of our store when the app loads.\\r\\n// Usually you would fetch this from a server\\r\\nconst defaultTasks = {\\r\\n  1: { id: \'1\', title: \'Something\', state: \'TASK_INBOX\' },\\r\\n  2: { id: \'2\', title: \'Something more\', state: \'TASK_INBOX\' },\\r\\n  3: { id: \'3\', title: \'Something else\', state: \'TASK_INBOX\' },\\r\\n  4: { id: \'4\', title: \'Something again\', state: \'TASK_INBOX\' },\\r\\n};\\r\\n\\r\\nexport class TaskStateModel {\\r\\n  entities: { [id: number]: Task };\\r\\n  error: boolean;\\r\\n}\\r\\n\\r\\n// Sets the default state\\r\\n@State<TaskStateModel>({\\r\\n  name: \'tasks\',\\r\\n  defaults: {\\r\\n    entities: defaultTasks,\\r\\n    error: false,\\r\\n  },\\r\\n})\\r\\nexport class TasksState {\\r\\n  @Selector()\\r\\n  static getAllTasks(state: TaskStateModel) {\\r\\n    const entities = state.entities;\\r\\n    return Object.keys(entities).map(id => entities[+id]);\\r\\n  }\\r\\n\\r\\n// Defines a new selector for the error field\\r\\n@Selector()\\r\\nstatic getError(state: TaskStateModel) {\\r\\n   const { error } = state;\\r\\n   return error;\\r\\n}\\r\\n\\r\\n  // Triggers the PinTask action, similar to redux\\r\\n  @Action(PinTask)\\r\\n  pinTask({ patchState, getState }: StateContext<TaskStateModel>, { payload }: PinTask) {\\r\\n    const state = getState().entities;\\r\\n\\r\\n    const entities = {\\r\\n      ...state,\\r\\n      [payload]: { ...state[payload], state: \'TASK_PINNED\' },\\r\\n    };\\r\\n\\r\\n    patchState({\\r\\n      entities,\\r\\n    });\\r\\n  }\\r\\n  // Triggers the archiveTask action, similar to redux\\r\\n  @Action(ArchiveTask)\\r\\n  archiveTask({ patchState, getState }: StateContext<TaskStateModel>, { payload }: ArchiveTask) {\\r\\n    const state = getState().entities;\\r\\n\\r\\n    const entities = {\\r\\n      ...state,\\r\\n      [payload]: { ...state[payload], state: \'TASK_ARCHIVED\' },\\r\\n    };\\r\\n\\r\\n    patchState({\\r\\n      entities,\\r\\n    });\\r\\n  }\\r\\n\\r\\n  // Function to handle how the state should be updated when the action is triggered\\r\\n @Action(AppError)\\r\\n setAppError({ patchState, getState }: StateContext<TaskStateModel>, { payload }: AppError) {\\r\\n   const state = getState();\\r\\n   patchState({\\r\\n     error: !state.error,\\r\\n   });\\r\\n  }\\r\\n}\\r\\n","properties":[],"methods":[{"name":"archiveTask","args":[{"type":"StateContext<TaskStateModel>"},{"type":"ArchiveTask"}],"optional":false,"returnType":"void","typeParameters":[],"line":81,"decorators":[{"name":"Action","stringifiedArguments":"ArchiveTask"}],"jsdoctags":[{"type":"StateContext<TaskStateModel>","tagName":{"text":"param"}},{"type":"ArchiveTask","tagName":{"text":"param"}}]},{"name":"getAllTasks","args":[{"name":"state","type":"TaskStateModel"}],"optional":false,"returnType":"any","typeParameters":[],"line":53,"decorators":[{"name":"Selector","stringifiedArguments":""}],"modifierKind":[115],"jsdoctags":[{"name":"state","type":"TaskStateModel","tagName":{"text":"param"}}]},{"name":"getError","args":[{"name":"state","type":"TaskStateModel"}],"optional":false,"returnType":"boolean","typeParameters":[],"line":60,"decorators":[{"name":"Selector","stringifiedArguments":""}],"modifierKind":[115],"jsdoctags":[{"name":"state","type":"TaskStateModel","tagName":{"text":"param"}}]},{"name":"pinTask","args":[{"type":"StateContext<TaskStateModel>"},{"type":"PinTask"}],"optional":false,"returnType":"void","typeParameters":[],"line":67,"decorators":[{"name":"Action","stringifiedArguments":"PinTask"}],"jsdoctags":[{"type":"StateContext<TaskStateModel>","tagName":{"text":"param"}},{"type":"PinTask","tagName":{"text":"param"}}]},{"name":"setAppError","args":[{"type":"StateContext<TaskStateModel>"},{"type":"AppError"}],"optional":false,"returnType":"void","typeParameters":[],"line":96,"decorators":[{"name":"Action","stringifiedArguments":"AppError"}],"jsdoctags":[{"type":"StateContext<TaskStateModel>","tagName":{"text":"param"}},{"type":"AppError","tagName":{"text":"param"}}]}],"indexSignatures":[]},{"name":"TaskStateModel","id":"class-TaskStateModel-8fcbd930b9a660e85cca6f7baa2d165b","file":"src/app/state/task.state.ts","type":"class","sourceCode":"import { State, Selector, Action, StateContext } from \'@ngxs/store\';\\r\\nimport { Task } from \'../models/task.model\';\\r\\n\\r\\n// Defines the actions available to the app\\r\\nexport const actions = {\\r\\n  ARCHIVE_TASK: \'ARCHIVE_TASK\',\\r\\n  PIN_TASK: \'PIN_TASK\',\\r\\n  ERROR: \'APP_ERROR\'\\r\\n};\\r\\n\\r\\nexport class ArchiveTask {\\r\\n  static readonly type = actions.ARCHIVE_TASK;\\r\\n\\r\\n  constructor(public payload: string) {}\\r\\n}\\r\\n\\r\\n// The class definition for our error field\\r\\nexport class AppError {\\r\\n  static readonly type = actions.ERROR;\\r\\n  constructor(public payload: boolean) {}\\r\\n}\\r\\n\\r\\nexport class PinTask {\\r\\n  static readonly type = actions.PIN_TASK;\\r\\n\\r\\n  constructor(public payload: string) {}\\r\\n}\\r\\n\\r\\n// The initial state of our store when the app loads.\\r\\n// Usually you would fetch this from a server\\r\\nconst defaultTasks = {\\r\\n  1: { id: \'1\', title: \'Something\', state: \'TASK_INBOX\' },\\r\\n  2: { id: \'2\', title: \'Something more\', state: \'TASK_INBOX\' },\\r\\n  3: { id: \'3\', title: \'Something else\', state: \'TASK_INBOX\' },\\r\\n  4: { id: \'4\', title: \'Something again\', state: \'TASK_INBOX\' },\\r\\n};\\r\\n\\r\\nexport class TaskStateModel {\\r\\n  entities: { [id: number]: Task };\\r\\n  error: boolean;\\r\\n}\\r\\n\\r\\n// Sets the default state\\r\\n@State<TaskStateModel>({\\r\\n  name: \'tasks\',\\r\\n  defaults: {\\r\\n    entities: defaultTasks,\\r\\n    error: false,\\r\\n  },\\r\\n})\\r\\nexport class TasksState {\\r\\n  @Selector()\\r\\n  static getAllTasks(state: TaskStateModel) {\\r\\n    const entities = state.entities;\\r\\n    return Object.keys(entities).map(id => entities[+id]);\\r\\n  }\\r\\n\\r\\n// Defines a new selector for the error field\\r\\n@Selector()\\r\\nstatic getError(state: TaskStateModel) {\\r\\n   const { error } = state;\\r\\n   return error;\\r\\n}\\r\\n\\r\\n  // Triggers the PinTask action, similar to redux\\r\\n  @Action(PinTask)\\r\\n  pinTask({ patchState, getState }: StateContext<TaskStateModel>, { payload }: PinTask) {\\r\\n    const state = getState().entities;\\r\\n\\r\\n    const entities = {\\r\\n      ...state,\\r\\n      [payload]: { ...state[payload], state: \'TASK_PINNED\' },\\r\\n    };\\r\\n\\r\\n    patchState({\\r\\n      entities,\\r\\n    });\\r\\n  }\\r\\n  // Triggers the archiveTask action, similar to redux\\r\\n  @Action(ArchiveTask)\\r\\n  archiveTask({ patchState, getState }: StateContext<TaskStateModel>, { payload }: ArchiveTask) {\\r\\n    const state = getState().entities;\\r\\n\\r\\n    const entities = {\\r\\n      ...state,\\r\\n      [payload]: { ...state[payload], state: \'TASK_ARCHIVED\' },\\r\\n    };\\r\\n\\r\\n    patchState({\\r\\n      entities,\\r\\n    });\\r\\n  }\\r\\n\\r\\n  // Function to handle how the state should be updated when the action is triggered\\r\\n @Action(AppError)\\r\\n setAppError({ patchState, getState }: StateContext<TaskStateModel>, { payload }: AppError) {\\r\\n   const state = getState();\\r\\n   patchState({\\r\\n     error: !state.error,\\r\\n   });\\r\\n  }\\r\\n}\\r\\n","properties":[{"name":"entities","type":"literal type","optional":false,"description":"","line":39},{"name":"error","type":"boolean","optional":false,"description":"","line":40}],"methods":[],"indexSignatures":[],"inputsClass":[],"outputsClass":[],"hostBindings":[],"hostListeners":[]}],"directives":[],"components":[{"name":"AppComponent","id":"component-AppComponent-cf64bd7599c1911cbc23dd3b39c137ac","file":"src/app/app.component.ts","encapsulation":[],"entryComponents":[],"inputs":[],"outputs":[],"providers":[],"selector":"app-root","styleUrls":[],"styles":[],"template":"<app-inbox-screen></app-inbox-screen>\\n","templateUrl":[],"viewProviders":[],"inputsClass":[],"outputsClass":[],"propertiesClass":[{"name":"title","defaultValue":"\'taskbox\'","type":"string","optional":false,"description":"","line":10}],"methodsClass":[],"hostBindings":[],"hostListeners":[],"description":"","rawdescription":"","type":"component","sourceCode":"import { Component } from \'@angular/core\';\\n\\n@Component({\\n  selector: \'app-root\',\\n  template: `\\n   <app-inbox-screen></app-inbox-screen>\\n `\\n})\\nexport class AppComponent {\\n  title = \'taskbox\';\\n}\\n","assetsDirs":[],"styleUrlsData":"","stylesData":""},{"name":"ButtonComponent","id":"component-ButtonComponent-642c6c4e474cd5a0ac760dfda26b2fc9","file":"src/stories/button.component.ts","encapsulation":[],"entryComponents":[],"inputs":[],"outputs":[],"providers":[],"selector":"storybook-button","styleUrls":["./button.css"],"styles":[],"template":"<button   type=\\"button\\"\\n   (click)=\\"onClick.emit($event)\\"\\n   [ngClass]=\\"classes\\"\\n   [ngStyle]=\\"{ \'background-color\': backgroundColor }\\"\\n >\\n   {{ label }}\\n </button>","templateUrl":[],"viewProviders":[],"inputsClass":[{"name":"backgroundColor","description":"<p>What background color to use</p>\\n","line":26,"type":"string"},{"name":"label","defaultValue":"\'Button\'","description":"<p>Button contents</p>\\n","line":40},{"name":"primary","defaultValue":"false","description":"<p>Is this the principal call to action on the page?</p>\\n","line":20},{"name":"size","defaultValue":"\'medium\'","description":"<p>How large should the button be?</p>\\n","line":32,"type":"\\"small\\" | \\"medium\\" | \\"large\\""}],"outputsClass":[{"name":"onClick","defaultValue":"new EventEmitter<Event>()","description":"<p>Optional click handler</p>\\n","line":46,"type":"EventEmitter"}],"propertiesClass":[],"methodsClass":[],"hostBindings":[],"hostListeners":[],"description":"","rawdescription":"","type":"component","sourceCode":"import { Component, Input, Output, EventEmitter } from \'@angular/core\';\\n\\n@Component({\\n  selector: \'storybook-button\',\\n  template: ` <button\\n    type=\\"button\\"\\n    (click)=\\"onClick.emit($event)\\"\\n    [ngClass]=\\"classes\\"\\n    [ngStyle]=\\"{ \'background-color\': backgroundColor }\\"\\n  >\\n    {{ label }}\\n  </button>`,\\n  styleUrls: [\'./button.css\'],\\n})\\nexport default class ButtonComponent {\\n  /**\\n   * Is this the principal call to action on the page?\\n   */\\n  @Input()\\n  primary = false;\\n\\n  /**\\n   * What background color to use\\n   */\\n  @Input()\\n  backgroundColor?: string;\\n\\n  /**\\n   * How large should the button be?\\n   */\\n  @Input()\\n  size: \'small\' | \'medium\' | \'large\' = \'medium\';\\n\\n  /**\\n   * Button contents\\n   *\\n   * @required\\n   */\\n  @Input()\\n  label = \'Button\';\\n\\n  /**\\n   * Optional click handler\\n   */\\n  @Output()\\n  onClick = new EventEmitter<Event>();\\n\\n  public get classes(): string[] {\\n    const mode = this.primary ? \'storybook-button--primary\' : \'storybook-button--secondary\';\\n\\n    return [\'storybook-button\', `storybook-button--${this.size}`, mode];\\n  }\\n}\\n","assetsDirs":[],"styleUrlsData":[{"data":".storybook-button {\\n  font-family: \'Nunito Sans\', \'Helvetica Neue\', Helvetica, Arial, sans-serif;\\n  font-weight: 700;\\n  border: 0;\\n  border-radius: 3em;\\n  cursor: pointer;\\n  display: inline-block;\\n  line-height: 1;\\n}\\n.storybook-button--primary {\\n  color: white;\\n  background-color: #1ea7fd;\\n}\\n.storybook-button--secondary {\\n  color: #333;\\n  background-color: transparent;\\n  box-shadow: rgba(0, 0, 0, 0.15) 0px 0px 0px 1px inset;\\n}\\n.storybook-button--small {\\n  font-size: 12px;\\n  padding: 10px 16px;\\n}\\n.storybook-button--medium {\\n  font-size: 14px;\\n  padding: 11px 20px;\\n}\\n.storybook-button--large {\\n  font-size: 16px;\\n  padding: 12px 24px;\\n}\\n","styleUrl":"./button.css"}],"stylesData":"","accessors":{"classes":{"name":"classes","getSignature":{"name":"classes","type":"[]","returnType":"string[]","line":48}}}},{"name":"HeaderComponent","id":"component-HeaderComponent-246e2a69dc126a3bd76c6328dd3b93e2","file":"src/stories/header.component.ts","encapsulation":[],"entryComponents":[],"inputs":[],"outputs":[],"providers":[],"selector":"storybook-header","styleUrls":["./header.css"],"styles":[],"template":"<header>    <div class=\\"wrapper\\">\\n      <div>\\n        <svg width=\\"32\\" height=\\"32\\" viewBox=\\"0 0 32 32\\" xmlns=\\"http://www.w3.org/2000/svg\\">\\n          <g fill=\\"none\\" fillRule=\\"evenodd\\">\\n            <path\\n              d=\\"M10 0h12a10 10 0 0110 10v12a10 10 0 01-10 10H10A10 10 0 010 22V10A10 10 0 0110 0z\\"\\n              fill=\\"#FFF\\"\\n            />\\n            <path\\n              d=\\"M5.3 10.6l10.4 6v11.1l-10.4-6v-11zm11.4-6.2l9.7 5.5-9.7 5.6V4.4z\\"\\n              fill=\\"#555AB9\\"\\n            />\\n            <path\\n              d=\\"M27.2 10.6v11.2l-10.5 6V16.5l10.5-6zM15.7 4.4v11L6 10l9.7-5.5z\\"\\n              fill=\\"#91BAF8\\"\\n            />\\n          </g>\\n        </svg>\\n        <h1>Acme</h1>\\n      </div>\\n      <div>\\n        <storybook-button\\n          *ngIf=\\"user\\"\\n          size=\\"small\\"\\n          (onClick)=\\"onLogout.emit($event)\\"\\n          label=\\"Log out\\"\\n        ></storybook-button>\\n        <storybook-button\\n          *ngIf=\\"!user\\"\\n          size=\\"small\\"\\n          (onClick)=\\"onLogin.emit($event)\\"\\n          label=\\"Log in\\"\\n        ></storybook-button>\\n        <storybook-button\\n          *ngIf=\\"!user\\"\\n          primary\\n          size=\\"small\\"\\n          (onClick)=\\"onCreateAccount.emit($event)\\"\\n          label=\\"Sign up\\"\\n        ></storybook-button>\\n      </div>\\n    </div>\\n  </header>","templateUrl":[],"viewProviders":[],"inputsClass":[{"name":"user","defaultValue":"null","line":53,"type":"unknown"}],"outputsClass":[{"name":"onCreateAccount","defaultValue":"new EventEmitter<Event>()","line":62,"type":"EventEmitter"},{"name":"onLogin","defaultValue":"new EventEmitter<Event>()","line":56,"type":"EventEmitter"},{"name":"onLogout","defaultValue":"new EventEmitter<Event>()","line":59,"type":"EventEmitter"}],"propertiesClass":[],"methodsClass":[],"hostBindings":[],"hostListeners":[],"description":"","rawdescription":"","type":"component","sourceCode":"import { Component, Input, Output, EventEmitter } from \'@angular/core\';\\n\\n@Component({\\n  selector: \'storybook-header\',\\n  template: `<header>\\n    <div class=\\"wrapper\\">\\n      <div>\\n        <svg width=\\"32\\" height=\\"32\\" viewBox=\\"0 0 32 32\\" xmlns=\\"http://www.w3.org/2000/svg\\">\\n          <g fill=\\"none\\" fillRule=\\"evenodd\\">\\n            <path\\n              d=\\"M10 0h12a10 10 0 0110 10v12a10 10 0 01-10 10H10A10 10 0 010 22V10A10 10 0 0110 0z\\"\\n              fill=\\"#FFF\\"\\n            />\\n            <path\\n              d=\\"M5.3 10.6l10.4 6v11.1l-10.4-6v-11zm11.4-6.2l9.7 5.5-9.7 5.6V4.4z\\"\\n              fill=\\"#555AB9\\"\\n            />\\n            <path\\n              d=\\"M27.2 10.6v11.2l-10.5 6V16.5l10.5-6zM15.7 4.4v11L6 10l9.7-5.5z\\"\\n              fill=\\"#91BAF8\\"\\n            />\\n          </g>\\n        </svg>\\n        <h1>Acme</h1>\\n      </div>\\n      <div>\\n        <storybook-button\\n          *ngIf=\\"user\\"\\n          size=\\"small\\"\\n          (onClick)=\\"onLogout.emit($event)\\"\\n          label=\\"Log out\\"\\n        ></storybook-button>\\n        <storybook-button\\n          *ngIf=\\"!user\\"\\n          size=\\"small\\"\\n          (onClick)=\\"onLogin.emit($event)\\"\\n          label=\\"Log in\\"\\n        ></storybook-button>\\n        <storybook-button\\n          *ngIf=\\"!user\\"\\n          primary\\n          size=\\"small\\"\\n          (onClick)=\\"onCreateAccount.emit($event)\\"\\n          label=\\"Sign up\\"\\n        ></storybook-button>\\n      </div>\\n    </div>\\n  </header>`,\\n  styleUrls: [\'./header.css\'],\\n})\\nexport default class HeaderComponent {\\n  @Input()\\n  user: unknown = null;\\n\\n  @Output()\\n  onLogin = new EventEmitter<Event>();\\n\\n  @Output()\\n  onLogout = new EventEmitter<Event>();\\n\\n  @Output()\\n  onCreateAccount = new EventEmitter<Event>();\\n}\\n","assetsDirs":[],"styleUrlsData":[{"data":".wrapper {\\n  font-family: \'Nunito Sans\', \'Helvetica Neue\', Helvetica, Arial, sans-serif;\\n  border-bottom: 1px solid rgba(0, 0, 0, 0.1);\\n  padding: 15px 20px;\\n  display: flex;\\n  align-items: center;\\n  justify-content: space-between;\\n}\\n\\nsvg {\\n  display: inline-block;\\n  vertical-align: top;\\n}\\n\\nh1 {\\n  font-weight: 900;\\n  font-size: 20px;\\n  line-height: 1;\\n  margin: 6px 0 6px 10px;\\n  display: inline-block;\\n  vertical-align: top;\\n}\\n\\nbutton + button {\\n  margin-left: 10px;\\n}\\n","styleUrl":"./header.css"}],"stylesData":""},{"name":"InboxScreenComponent","id":"component-InboxScreenComponent-476daf3173977f04f8d677843e048bfe","file":"src/app/components/inbox-screen.component.ts","encapsulation":[],"entryComponents":[],"inputs":[],"outputs":[],"providers":[],"selector":"app-inbox-screen","styleUrls":[],"styles":[],"template":"<app-pure-inbox-screen [error]=\\"error$ | async\\"></app-pure-inbox-screen>\\n","templateUrl":[],"viewProviders":[],"inputsClass":[],"outputsClass":[],"propertiesClass":[{"name":"error$","type":"Observable<any>","optional":false,"description":"","line":13,"decorators":[{"name":"Select","stringifiedArguments":"TasksState.getError"}]}],"methodsClass":[],"hostBindings":[],"hostListeners":[],"description":"","rawdescription":"","type":"component","sourceCode":"import { Component } from \'@angular/core\';\\r\\nimport { Select } from \'@ngxs/store\';\\r\\nimport { TasksState } from \'../state/task.state\';\\r\\nimport { Observable } from \'rxjs\';\\r\\n\\r\\n@Component({\\r\\n  selector: \'app-inbox-screen\',\\r\\n  template: `\\r\\n    <app-pure-inbox-screen [error]=\\"error$ | async\\"></app-pure-inbox-screen>\\r\\n  `,\\r\\n})\\r\\nexport class InboxScreenComponent {\\r\\n  @Select(TasksState.getError) error$: Observable<any>;\\r\\n}\\r\\n","assetsDirs":[],"styleUrlsData":"","stylesData":""},{"name":"PageComponent","id":"component-PageComponent-cca1a8911321fa17756ce90c90de65cc","file":"src/stories/page.component.ts","encapsulation":[],"entryComponents":[],"inputs":[],"outputs":[],"providers":[],"selector":"storybook-page","styleUrls":["./page.css"],"styles":[],"template":"<article>    <storybook-header\\n      [user]=\\"user\\"\\n      (onLogout)=\\"onLogout.emit($event)\\"\\n      (onLogin)=\\"onLogin.emit($event)\\"\\n      (onCreateAccount)=\\"onCreateAccount.emit($event)\\"\\n    ></storybook-header>\\n    <section>\\n      <h2>Pages in Storybook</h2>\\n      <p>\\n        We recommend building UIs with a\\n        <a href=\\"https://componentdriven.org\\" target=\\"_blank\\" rel=\\"noopener noreferrer\\">\\n          <strong>component-driven</strong>\\n        </a>\\n        process starting with atomic components and ending with pages.\\n      </p>\\n      <p>\\n        Render pages with mock data. This makes it easy to build and review page states without\\n        needing to navigate to them in your app. Here are some handy patterns for managing page data\\n        in Storybook:\\n      </p>\\n      <ul>\\n        <li>\\n          Use a higher-level connected component. Storybook helps you compose such data from the\\n          \\"args\\" of child component stories\\n        </li>\\n        <li>\\n          Assemble data in the page component from your services. You can mock these services out\\n          using Storybook.\\n        </li>\\n      </ul>\\n      <p>\\n        Get a guided tutorial on component-driven development at\\n        <a href=\\"https://www.learnstorybook.com\\" target=\\"_blank\\" rel=\\"noopener noreferrer\\">\\n          Learn Storybook\\n        </a>\\n        . Read more in the\\n        <a href=\\"https://storybook.js.org/docs\\" target=\\"_blank\\" rel=\\"noopener noreferrer\\">\\n          docs\\n        </a>\\n        .\\n      </p>\\n      <div class=\\"tip-wrapper\\">\\n        <span class=\\"tip\\">Tip</span> Adjust the width of the canvas with the\\n        <svg width=\\"10\\" height=\\"10\\" viewBox=\\"0 0 12 12\\" xmlns=\\"http://www.w3.org/2000/svg\\">\\n          <g fill=\\"none\\" fillRule=\\"evenodd\\">\\n            <path\\n              d=\\"M1.5 5.2h4.8c.3 0 .5.2.5.4v5.1c-.1.2-.3.3-.4.3H1.4a.5.5 0 01-.5-.4V5.7c0-.3.2-.5.5-.5zm0-2.1h6.9c.3 0 .5.2.5.4v7a.5.5 0 01-1 0V4H1.5a.5.5 0 010-1zm0-2.1h9c.3 0 .5.2.5.4v9.1a.5.5 0 01-1 0V2H1.5a.5.5 0 010-1zm4.3 5.2H2V10h3.8V6.2z\\"\\n              id=\\"a\\"\\n              fill=\\"#999\\"\\n            />\\n          </g>\\n        </svg>\\n        Viewports addon in the toolbar\\n      </div>\\n    </section>\\n  </article>","templateUrl":[],"viewProviders":[],"inputsClass":[{"name":"user","defaultValue":"null","line":66,"type":"unknown"}],"outputsClass":[{"name":"onCreateAccount","defaultValue":"new EventEmitter<Event>()","line":75,"type":"EventEmitter"},{"name":"onLogin","defaultValue":"new EventEmitter<Event>()","line":69,"type":"EventEmitter"},{"name":"onLogout","defaultValue":"new EventEmitter<Event>()","line":72,"type":"EventEmitter"}],"propertiesClass":[],"methodsClass":[],"hostBindings":[],"hostListeners":[],"description":"","rawdescription":"","type":"component","sourceCode":"import { Component, Input, Output, EventEmitter } from \'@angular/core\';\\n\\n@Component({\\n  selector: \'storybook-page\',\\n  template: `<article>\\n    <storybook-header\\n      [user]=\\"user\\"\\n      (onLogout)=\\"onLogout.emit($event)\\"\\n      (onLogin)=\\"onLogin.emit($event)\\"\\n      (onCreateAccount)=\\"onCreateAccount.emit($event)\\"\\n    ></storybook-header>\\n    <section>\\n      <h2>Pages in Storybook</h2>\\n      <p>\\n        We recommend building UIs with a\\n        <a href=\\"https://componentdriven.org\\" target=\\"_blank\\" rel=\\"noopener noreferrer\\">\\n          <strong>component-driven</strong>\\n        </a>\\n        process starting with atomic components and ending with pages.\\n      </p>\\n      <p>\\n        Render pages with mock data. This makes it easy to build and review page states without\\n        needing to navigate to them in your app. Here are some handy patterns for managing page data\\n        in Storybook:\\n      </p>\\n      <ul>\\n        <li>\\n          Use a higher-level connected component. Storybook helps you compose such data from the\\n          \\"args\\" of child component stories\\n        </li>\\n        <li>\\n          Assemble data in the page component from your services. You can mock these services out\\n          using Storybook.\\n        </li>\\n      </ul>\\n      <p>\\n        Get a guided tutorial on component-driven development at\\n        <a href=\\"https://www.learnstorybook.com\\" target=\\"_blank\\" rel=\\"noopener noreferrer\\">\\n          Learn Storybook\\n        </a>\\n        . Read more in the\\n        <a href=\\"https://storybook.js.org/docs\\" target=\\"_blank\\" rel=\\"noopener noreferrer\\">\\n          docs\\n        </a>\\n        .\\n      </p>\\n      <div class=\\"tip-wrapper\\">\\n        <span class=\\"tip\\">Tip</span> Adjust the width of the canvas with the\\n        <svg width=\\"10\\" height=\\"10\\" viewBox=\\"0 0 12 12\\" xmlns=\\"http://www.w3.org/2000/svg\\">\\n          <g fill=\\"none\\" fillRule=\\"evenodd\\">\\n            <path\\n              d=\\"M1.5 5.2h4.8c.3 0 .5.2.5.4v5.1c-.1.2-.3.3-.4.3H1.4a.5.5 0 01-.5-.4V5.7c0-.3.2-.5.5-.5zm0-2.1h6.9c.3 0 .5.2.5.4v7a.5.5 0 01-1 0V4H1.5a.5.5 0 010-1zm0-2.1h9c.3 0 .5.2.5.4v9.1a.5.5 0 01-1 0V2H1.5a.5.5 0 010-1zm4.3 5.2H2V10h3.8V6.2z\\"\\n              id=\\"a\\"\\n              fill=\\"#999\\"\\n            />\\n          </g>\\n        </svg>\\n        Viewports addon in the toolbar\\n      </div>\\n    </section>\\n  </article>`,\\n  styleUrls: [\'./page.css\'],\\n})\\nexport default class PageComponent {\\n  @Input()\\n  user: unknown = null;\\n\\n  @Output()\\n  onLogin = new EventEmitter<Event>();\\n\\n  @Output()\\n  onLogout = new EventEmitter<Event>();\\n\\n  @Output()\\n  onCreateAccount = new EventEmitter<Event>();\\n}\\n\\n// export const Page = ({ user, onLogin, onLogout, onCreateAccount }) => (\\n//   <article>\\n//     <Header user={user} onLogin={onLogin} onLogout={onLogout} onCreateAccount={onCreateAccount} />\\n\\n// );\\n// Page.propTypes = {\\n//   user: PropTypes.shape({}),\\n//   onLogin: PropTypes.func.isRequired,\\n//   onLogout: PropTypes.func.isRequired,\\n//   onCreateAccount: PropTypes.func.isRequired,\\n// };\\n\\n// Page.defaultProps = {\\n//   user: null,\\n// };\\n","assetsDirs":[],"styleUrlsData":[{"data":"section {\\n  font-family: \'Nunito Sans\', \'Helvetica Neue\', Helvetica, Arial, sans-serif;\\n  font-size: 14px;\\n  line-height: 24px;\\n  padding: 48px 20px;\\n  margin: 0 auto;\\n  max-width: 600px;\\n  color: #333;\\n}\\n\\nh2 {\\n  font-weight: 900;\\n  font-size: 32px;\\n  line-height: 1;\\n  margin: 0 0 4px;\\n  display: inline-block;\\n  vertical-align: top;\\n}\\n\\np {\\n  margin: 1em 0;\\n}\\n\\na {\\n  text-decoration: none;\\n  color: #1ea7fd;\\n}\\n\\nul {\\n  padding-left: 30px;\\n  margin: 1em 0;\\n}\\n\\nli {\\n  margin-bottom: 8px;\\n}\\n\\n.tip {\\n  display: inline-block;\\n  border-radius: 1em;\\n  font-size: 11px;\\n  line-height: 12px;\\n  font-weight: 700;\\n  background: #e7fdd8;\\n  color: #66bf3c;\\n  padding: 4px 12px;\\n  margin-right: 10px;\\n  vertical-align: top;\\n}\\n\\n.tip-wrapper {\\n  font-size: 13px;\\n  line-height: 20px;\\n  margin-top: 40px;\\n  margin-bottom: 40px;\\n}\\n\\n.tip-wrapper svg {\\n  display: inline-block;\\n  height: 12px;\\n  width: 12px;\\n  margin-right: 4px;\\n  vertical-align: top;\\n  margin-top: 3px;\\n}\\n\\n.tip-wrapper svg path {\\n  fill: #1ea7fd;\\n}\\n","styleUrl":"./page.css"}],"stylesData":""},{"name":"PureInboxScreenComponent","id":"component-PureInboxScreenComponent-06e4176033d1c2cc4cae55b4c9dd2228","file":"src/app/components/pure-inbox-screen.component.ts","encapsulation":[],"entryComponents":[],"inputs":[],"outputs":[],"providers":[],"selector":"app-pure-inbox-screen","styleUrls":[],"styles":[],"template":"<div *ngIf=\\"error\\" class=\\"page lists-show\\">\\n  <div class=\\"wrapper-message\\">\\n    <span class=\\"icon-face-sad\\"></span>\\n    <div class=\\"title-message\\">Oh no!</div>\\n    <div class=\\"subtitle-message\\">Something went wrong</div>\\n  </div>\\n</div>\\n\\n<div *ngIf=\\"!error\\" class=\\"page lists-show\\">\\n  <nav>\\n    <h1 class=\\"title-page\\">\\n      <span class=\\"title-wrapper\\">Taskbox</span>\\n    </h1>\\n  </nav>\\n  <app-task-list></app-task-list>\\n</div>\\n","templateUrl":[],"viewProviders":[],"inputsClass":[{"name":"error","line":25,"type":"any"}],"outputsClass":[],"propertiesClass":[],"methodsClass":[],"hostBindings":[],"hostListeners":[],"description":"","rawdescription":"","type":"component","sourceCode":"import { Component, Input } from \'@angular/core\';\\r\\n\\r\\n@Component({\\r\\n  selector: \'app-pure-inbox-screen\',\\r\\n  template: `\\r\\n    <div *ngIf=\\"error\\" class=\\"page lists-show\\">\\r\\n      <div class=\\"wrapper-message\\">\\r\\n        <span class=\\"icon-face-sad\\"></span>\\r\\n        <div class=\\"title-message\\">Oh no!</div>\\r\\n        <div class=\\"subtitle-message\\">Something went wrong</div>\\r\\n      </div>\\r\\n    </div>\\r\\n\\r\\n    <div *ngIf=\\"!error\\" class=\\"page lists-show\\">\\r\\n      <nav>\\r\\n        <h1 class=\\"title-page\\">\\r\\n          <span class=\\"title-wrapper\\">Taskbox</span>\\r\\n        </h1>\\r\\n      </nav>\\r\\n      <app-task-list></app-task-list>\\r\\n    </div>\\r\\n  `,\\r\\n})\\r\\nexport class PureInboxScreenComponent {\\r\\n  @Input() error: any;\\r\\n}\\r\\n","assetsDirs":[],"styleUrlsData":"","stylesData":""},{"name":"PureTaskListComponent","id":"component-PureTaskListComponent-7d5a19b4f52b276aa4b37c92225a5c12","file":"src/app/components/pure-task-list.component.ts","encapsulation":[],"entryComponents":[],"inputs":[],"outputs":[],"providers":[],"selector":"app-pure-task-list","styleUrls":[],"styles":[],"template":"<div class=\\"list-items\\">\\n  <app-task\\n    *ngFor=\\"let task of tasksInOrder\\"\\n    [task]=\\"task\\"\\n    (onArchiveTask)=\\"onArchiveTask.emit($event)\\"\\n    (onPinTask)=\\"onPinTask.emit($event)\\"\\n  >\\n  </app-task>\\n  <div *ngIf=\\"tasksInOrder.length === 0 && !loading\\" class=\\"wrapper-message\\">\\n    <span class=\\"icon-check\\"></span>\\n    <div class=\\"title-message\\">You have no tasks</div>\\n    <div class=\\"subtitle-message\\">Sit back and relax</div>\\n  </div>\\n  <div *ngIf=\\"loading\\">\\n    <div *ngFor=\\"let i of [1, 2, 3, 4, 5, 6]\\" class=\\"loading-item\\">\\n      <span class=\\"glow-checkbox\\"></span>\\n      <span class=\\"glow-text\\"> <span>Loading</span> <span>cool</span> <span>state</span> </span>\\n    </div>\\n  </div>\\n</div>\\n","templateUrl":[],"viewProviders":[],"inputsClass":[{"name":"loading","defaultValue":"false","line":37},{"name":"task","defaultValue":"[]","line":29,"type":"Task[]"},{"name":"tasks","line":46,"type":"[]"}],"outputsClass":[{"name":"onArchiveTask","defaultValue":"new EventEmitter()","line":43,"type":"EventEmitter<any>"},{"name":"onPinTask","defaultValue":"new EventEmitter()","line":40,"type":"EventEmitter<any>"}],"propertiesClass":[],"methodsClass":[],"hostBindings":[],"hostListeners":[],"description":"","rawdescription":"","type":"component","sourceCode":"import { Component, Input, Output, EventEmitter } from \'@angular/core\';\\r\\nimport { Task } from \'../models/task.model\';\\r\\n@Component({\\r\\nselector: \'app-pure-task-list\',\\r\\ntemplate: `\\r\\n    <div class=\\"list-items\\">\\r\\n      <app-task\\r\\n        *ngFor=\\"let task of tasksInOrder\\"\\r\\n        [task]=\\"task\\"\\r\\n        (onArchiveTask)=\\"onArchiveTask.emit($event)\\"\\r\\n        (onPinTask)=\\"onPinTask.emit($event)\\"\\r\\n      >\\r\\n      </app-task>\\r\\n      <div *ngIf=\\"tasksInOrder.length === 0 && !loading\\" class=\\"wrapper-message\\">\\r\\n        <span class=\\"icon-check\\"></span>\\r\\n        <div class=\\"title-message\\">You have no tasks</div>\\r\\n        <div class=\\"subtitle-message\\">Sit back and relax</div>\\r\\n      </div>\\r\\n      <div *ngIf=\\"loading\\">\\r\\n        <div *ngFor=\\"let i of [1, 2, 3, 4, 5, 6]\\" class=\\"loading-item\\">\\r\\n          <span class=\\"glow-checkbox\\"></span>\\r\\n          <span class=\\"glow-text\\"> <span>Loading</span> <span>cool</span> <span>state</span> </span>\\r\\n        </div>\\r\\n      </div>\\r\\n    </div>\\r\\n  `,\\r\\n})\\r\\nexport class PureTaskListComponent {\\r\\n    @Input() task: Task[] = [];\\r\\n\\r\\n    /**\\r\\n     * @ignore\\r\\n     * Component property to define ordering of tasks\\r\\n     */\\r\\n    tasksInOrder: Task[] = [];\\r\\n\\r\\n    @Input() loading = false;\\r\\n\\r\\n    // tslint:disable-next-line: no-output-on-prefix\\r\\n    @Output() onPinTask: EventEmitter < any > = new EventEmitter();\\r\\n\\r\\n    // tslint:disable-next-line: no-output-on-prefix\\r\\n    @Output() onArchiveTask: EventEmitter < any > = new EventEmitter();\\r\\n\\r\\n    @Input()\\r\\n    set tasks(arr: Task[]) {\\r\\n        this.tasksInOrder = [\\r\\n            ...arr.filter(t => t.state === \'TASK_PINNED\'),\\r\\n            ...arr.filter(t => t.state !== \'TASK_PINNED\'),\\r\\n        ];\\r\\n    }\\r\\n}\\r\\n","assetsDirs":[],"styleUrlsData":"","stylesData":"","accessors":{"tasks":{"name":"tasks","setSignature":{"name":"tasks","type":"void","args":[{"name":"arr","type":"[]"}],"returnType":"void","line":46,"jsdoctags":[{"name":"arr","type":"[]","tagName":{"text":"param"}}]}}}},{"name":"TaskComponent","id":"component-TaskComponent-06c1b4ca8328c3414cf024dc67a50845","file":"src/app/components/task.component.ts","encapsulation":[],"entryComponents":[],"inputs":[],"outputs":[],"providers":[],"selector":"app-task","styleUrls":[],"styles":[],"template":"<div class=\\"list-item {{ task?.state }}\\">\\n      <label class=\\"checkbox\\">\\n        <input\\n          type=\\"checkbox\\"\\n          [defaultChecked]=\\"task?.state === \'TASK_ARCHIVED\'\\"\\n          disabled=\\"true\\"\\n          name=\\"checked\\"\\n        />\\n        <span class=\\"checkbox-custom\\" (click)=\\"onArchive(task.id)\\"></span>\\n      </label>\\n      <div class=\\"title\\">\\n        <input\\n          type=\\"text\\"\\n          [value]=\\"task?.title\\"\\n          readonly=\\"true\\"\\n          placeholder=\\"Input title\\"\\n        />\\n      </div>\\n      <div class=\\"actions\\">\\n        <a *ngIf=\\"task?.state !== \'TASK_ARCHIVED\'\\" (click)=\\"onPin(task.id)\\">\\n          <span class=\\"icon-star\\"></span>\\n        </a>\\n      </div>\\n   </div>\\n","templateUrl":[],"viewProviders":[],"inputsClass":[{"name":"task","line":34,"type":"any"}],"outputsClass":[{"name":"onArchiveTask","defaultValue":"new EventEmitter<Event>()","line":42,"type":"EventEmitter"},{"name":"onPinTask","defaultValue":"new EventEmitter<Event>()","line":38,"type":"EventEmitter"}],"propertiesClass":[],"methodsClass":[{"name":"onArchive","args":[{"name":"id","type":"any"}],"optional":false,"returnType":"void","typeParameters":[],"line":53,"description":"<ul>\\n<li>Component method to trigger the onArchive event</li>\\n</ul>\\n","jsdoctags":[{"name":{"pos":1412,"end":1414,"flags":0,"escapedText":"id"},"type":"any","tagName":{"pos":1406,"end":1411,"flags":0,"escapedText":"param"},"comment":"<p>string</p>\\n"}]},{"name":"onPin","args":[{"name":"id","type":"any"}],"optional":false,"returnType":"void","typeParameters":[],"line":47,"description":"<ul>\\n<li>Component method to trigger the onPin event</li>\\n</ul>\\n","jsdoctags":[{"name":{"pos":1284,"end":1286,"flags":0,"escapedText":"id"},"type":"any","tagName":{"pos":1278,"end":1283,"flags":0,"escapedText":"param"},"comment":"<p>string</p>\\n"}]}],"hostBindings":[],"hostListeners":[],"description":"","rawdescription":"","type":"component","sourceCode":"import { Component, Input, Output, EventEmitter } from \'@angular/core\';\\r\\nimport { Task } from \'../models/task.model\';\\r\\n\\r\\n@Component({\\r\\n  selector: \'app-task\',\\r\\n  template: `\\r\\n  <div class=\\"list-item {{ task?.state }}\\">\\r\\n        <label class=\\"checkbox\\">\\r\\n          <input\\r\\n            type=\\"checkbox\\"\\r\\n            [defaultChecked]=\\"task?.state === \'TASK_ARCHIVED\'\\"\\r\\n            disabled=\\"true\\"\\r\\n            name=\\"checked\\"\\r\\n          />\\r\\n          <span class=\\"checkbox-custom\\" (click)=\\"onArchive(task.id)\\"></span>\\r\\n        </label>\\r\\n        <div class=\\"title\\">\\r\\n          <input\\r\\n            type=\\"text\\"\\r\\n            [value]=\\"task?.title\\"\\r\\n            readonly=\\"true\\"\\r\\n            placeholder=\\"Input title\\"\\r\\n          />\\r\\n        </div>\\r\\n        <div class=\\"actions\\">\\r\\n          <a *ngIf=\\"task?.state !== \'TASK_ARCHIVED\'\\" (click)=\\"onPin(task.id)\\">\\r\\n            <span class=\\"icon-star\\"></span>\\r\\n          </a>\\r\\n        </div>\\r\\n     </div>\\r\\n  `,\\r\\n})\\r\\nexport class TaskComponent {\\r\\n  @Input() task: any;\\r\\n\\r\\n  // tslint:disable-next-line: no-output-on-prefix\\r\\n  @Output()\\r\\n  onPinTask = new EventEmitter<Event>();\\r\\n\\r\\n  // tslint:disable-next-line: no-output-on-prefix\\r\\n  @Output()\\r\\n  onArchiveTask = new EventEmitter<Event>();\\r\\n\\r\\n/*** Component method to trigger the onPin event\\r\\n* @param id string\\r\\n*/\\r\\nonPin(id: any) {\\r\\n  this.onPinTask.emit(id);\\r\\n}\\r\\n/*** Component method to trigger the onArchive event\\r\\n * @param id string\\r\\n*/\\r\\nonArchive(id: any) {\\r\\n   this.onArchiveTask.emit(id);\\r\\n }\\r\\n}\\r\\n","assetsDirs":[],"styleUrlsData":"","stylesData":""},{"name":"TaskListComponent","id":"component-TaskListComponent-aec37a3eb84b259205c0258b3c2da322","file":"src/app/components/task-list.component.ts","encapsulation":[],"entryComponents":[],"inputs":[],"outputs":[],"providers":[],"selector":"app-task-list","styleUrls":[],"styles":[],"template":"<app-pure-task-list\\n  [tasks]=\\"tasks$ | async\\"\\n  (onArchiveTask)=\\"archiveTask($event)\\"\\n  (onPinTask)=\\"pinTask($event)\\"\\n></app-pure-task-list>\\n","templateUrl":[],"viewProviders":[],"inputsClass":[],"outputsClass":[],"propertiesClass":[{"name":"tasks$","type":"Observable<Task[]>","optional":false,"description":"","line":18,"decorators":[{"name":"Select","stringifiedArguments":"TasksState.getAllTasks"}]}],"methodsClass":[{"name":"archiveTask","args":[{"name":"id","type":"string"}],"optional":false,"returnType":"void","typeParameters":[],"line":25,"description":"<p>Component method to trigger the archiveTask event</p>\\n","jsdoctags":[{"name":"id","type":"string","tagName":{"text":"param"}}]},{"name":"pinTask","args":[{"name":"id","type":"string"}],"optional":false,"returnType":"void","typeParameters":[],"line":32,"description":"<p>Component method to trigger the pinTask event</p>\\n","jsdoctags":[{"name":"id","type":"string","tagName":{"text":"param"}}]}],"hostBindings":[],"hostListeners":[],"description":"","rawdescription":"","type":"component","sourceCode":"import { Component } from \'@angular/core\';\\r\\nimport { Select, Store } from \'@ngxs/store\';\\r\\nimport { TasksState, ArchiveTask, PinTask } from \'../state/task.state\';\\r\\nimport { Task } from \'../models/task.model\';\\r\\nimport { Observable } from \'rxjs\';\\r\\n\\r\\n@Component({\\r\\n  selector: \'app-task-list\',\\r\\n  template: `\\r\\n    <app-pure-task-list\\r\\n      [tasks]=\\"tasks$ | async\\"\\r\\n      (onArchiveTask)=\\"archiveTask($event)\\"\\r\\n      (onPinTask)=\\"pinTask($event)\\"\\r\\n    ></app-pure-task-list>\\r\\n  `,\\r\\n})\\r\\nexport class TaskListComponent {\\r\\n  @Select(TasksState.getAllTasks) tasks$: Observable<Task[]>;\\r\\n\\r\\n  constructor(private store: Store) {}\\r\\n\\r\\n  /**\\r\\n   * Component method to trigger the archiveTask event\\r\\n   */\\r\\n  archiveTask(id: string) {\\r\\n    this.store.dispatch(new ArchiveTask(id));\\r\\n  }\\r\\n\\r\\n  /**\\r\\n   * Component method to trigger the pinTask event\\r\\n   */\\r\\n  pinTask(id: string) {\\r\\n    this.store.dispatch(new PinTask(id));\\r\\n  }\\r\\n}\\r\\n","assetsDirs":[],"styleUrlsData":"","stylesData":"","constructorObj":{"name":"constructor","description":"","args":[{"name":"store","type":"Store"}],"line":18,"jsdoctags":[{"name":"store","type":"Store","tagName":{"text":"param"}}]}}],"modules":[{"name":"AppModule","children":[{"type":"providers","elements":[]},{"type":"declarations","elements":[{"name":"AppComponent"},{"name":"InboxScreenComponent"},{"name":"PureInboxScreenComponent"}]},{"type":"imports","elements":[{"name":"TaskModule"}]},{"type":"exports","elements":[]},{"type":"bootstrap","elements":[{"name":"AppComponent"}]},{"type":"classes","elements":[]}]},{"name":"TaskModule","children":[{"type":"providers","elements":[]},{"type":"declarations","elements":[{"name":"PureTaskListComponent"},{"name":"TaskComponent"},{"name":"TaskListComponent"}]},{"type":"imports","elements":[]},{"type":"exports","elements":[{"name":"TaskComponent"},{"name":"TaskListComponent"}]},{"type":"bootstrap","elements":[]},{"type":"classes","elements":[]}]}],"miscellaneous":{"variables":[{"name":"actions","ctype":"miscellaneous","subtype":"variable","file":"src/app/state/task.state.ts","type":"object","defaultValue":"{\\r\\n  ARCHIVE_TASK: \'ARCHIVE_TASK\',\\r\\n  PIN_TASK: \'PIN_TASK\',\\r\\n  ERROR: \'APP_ERROR\'\\r\\n}"},{"name":"actionsData","ctype":"miscellaneous","subtype":"variable","file":"src/app/components/task.stories.ts","type":"object","defaultValue":"{\\r\\n  onPinTask: action(\'onPinTask\'),\\r\\n  onArchiveTask: action(\'onArchiveTask\'),\\r\\n}"},{"name":"Archived","ctype":"miscellaneous","subtype":"variable","file":"src/app/components/task.stories.ts","type":"","defaultValue":"Template.bind({})"},{"name":"Default","ctype":"miscellaneous","subtype":"variable","file":"src/app/components/pure-inbox-screen.stories.ts","type":"","defaultValue":"Template.bind({})"},{"name":"Default","ctype":"miscellaneous","subtype":"variable","file":"src/app/components/pure-task-list.stories.ts","type":"","defaultValue":"Template.bind({})"},{"name":"Default","ctype":"miscellaneous","subtype":"variable","file":"src/app/components/task.stories.ts","type":"","defaultValue":"Template.bind({})"},{"name":"defaultTasks","ctype":"miscellaneous","subtype":"variable","file":"src/app/state/task.state.ts","type":"object","defaultValue":"{\\r\\n  1: { id: \'1\', title: \'Something\', state: \'TASK_INBOX\' },\\r\\n  2: { id: \'2\', title: \'Something more\', state: \'TASK_INBOX\' },\\r\\n  3: { id: \'3\', title: \'Something else\', state: \'TASK_INBOX\' },\\r\\n  4: { id: \'4\', title: \'Something again\', state: \'TASK_INBOX\' },\\r\\n}"},{"name":"Empty","ctype":"miscellaneous","subtype":"variable","file":"src/app/components/pure-task-list.stories.ts","type":"","defaultValue":"Template.bind({})"},{"name":"environment","ctype":"miscellaneous","subtype":"variable","file":"src/environments/environment.ts","type":"object","defaultValue":"{\\n  production: false\\n}"},{"name":"environment","ctype":"miscellaneous","subtype":"variable","file":"src/environments/environment.prod.ts","type":"object","defaultValue":"{\\n  production: true\\n}"},{"name":"Error","ctype":"miscellaneous","subtype":"variable","file":"src/app/components/pure-inbox-screen.stories.ts","type":"","defaultValue":"Template.bind({})"},{"name":"Large","ctype":"miscellaneous","subtype":"variable","file":"src/stories/Button.stories.ts","type":"","defaultValue":"Template.bind({})"},{"name":"Loading","ctype":"miscellaneous","subtype":"variable","file":"src/app/components/pure-task-list.stories.ts","type":"","defaultValue":"Template.bind({})"},{"name":"LoggedIn","ctype":"miscellaneous","subtype":"variable","file":"src/stories/Header.stories.ts","type":"","defaultValue":"Template.bind({})"},{"name":"LoggedIn","ctype":"miscellaneous","subtype":"variable","file":"src/stories/Page.stories.ts","type":"","defaultValue":"Template.bind({})"},{"name":"LoggedOut","ctype":"miscellaneous","subtype":"variable","file":"src/stories/Header.stories.ts","type":"","defaultValue":"Template.bind({})"},{"name":"LoggedOut","ctype":"miscellaneous","subtype":"variable","file":"src/stories/Page.stories.ts","type":"","defaultValue":"Template.bind({})"},{"name":"mock","ctype":"miscellaneous","subtype":"variable","file":"src/jest-config/__mocks__/globalMocks.ts","type":"","defaultValue":"() => {\\n    let storage = {};\\n    return {\\n      getItem: key => (key in storage ? storage[key] : null),\\n      setItem: (key, value) => (storage[key] = value || \'\'),\\n      removeItem: key => delete storage[key],\\n      clear: () => (storage = {}),\\n    };\\n  }"},{"name":"Pinned","ctype":"miscellaneous","subtype":"variable","file":"src/app/components/task.stories.ts","type":"","defaultValue":"Template.bind({})"},{"name":"Primary","ctype":"miscellaneous","subtype":"variable","file":"src/stories/Button.stories.ts","type":"","defaultValue":"Template.bind({})"},{"name":"Secondary","ctype":"miscellaneous","subtype":"variable","file":"src/stories/Button.stories.ts","type":"","defaultValue":"Template.bind({})"},{"name":"Small","ctype":"miscellaneous","subtype":"variable","file":"src/stories/Button.stories.ts","type":"","defaultValue":"Template.bind({})"},{"name":"Template","ctype":"miscellaneous","subtype":"variable","file":"src/stories/Button.stories.ts","type":"Story<Button>","defaultValue":"(args: Button) => ({\\n  component: Button,\\n  props: args,\\n})"},{"name":"Template","ctype":"miscellaneous","subtype":"variable","file":"src/stories/Header.stories.ts","type":"Story<Header>","defaultValue":"(args: Header) => ({\\n  component: Header,\\n  props: args,\\n})"},{"name":"Template","ctype":"miscellaneous","subtype":"variable","file":"src/stories/Page.stories.ts","type":"Story<Page>","defaultValue":"(args: Page) => ({\\n  component: Page,\\n  props: args,\\n})"},{"name":"Template","ctype":"miscellaneous","subtype":"variable","file":"src/app/components/pure-inbox-screen.stories.ts","type":"Story<PureInboxScreenComponent>","defaultValue":"(args) => ({\\r\\n  component: PureInboxScreenComponent,\\r\\n  props: args,\\r\\n})"},{"name":"Template","ctype":"miscellaneous","subtype":"variable","file":"src/app/components/pure-task-list.stories.ts","type":"Story<PureTaskListComponent>","defaultValue":"args => ({\\r\\n  props: {\\r\\n    ...args,\\r\\n    onPinTask: TaskStories.actionsData.onPinTask,\\r\\n    onArchiveTask: TaskStories.actionsData.onArchiveTask,\\r\\n  },\\r\\n})"},{"name":"Template","ctype":"miscellaneous","subtype":"variable","file":"src/app/components/task.stories.ts","type":"Story<TaskComponent>","defaultValue":"args => ({\\r\\n  props: {\\r\\n    ...args,\\r\\n    onPinTask: actionsData.onPinTask,\\r\\n    onArchiveTask: actionsData.onArchiveTask,\\r\\n  },\\r\\n})"},{"name":"WithPinnedTasks","ctype":"miscellaneous","subtype":"variable","file":"src/app/components/pure-task-list.stories.ts","type":"","defaultValue":"Template.bind({})"}],"functions":[],"typealiases":[],"enumerations":[],"groupedVariables":{"src/app/state/task.state.ts":[{"name":"actions","ctype":"miscellaneous","subtype":"variable","file":"src/app/state/task.state.ts","type":"object","defaultValue":"{\\r\\n  ARCHIVE_TASK: \'ARCHIVE_TASK\',\\r\\n  PIN_TASK: \'PIN_TASK\',\\r\\n  ERROR: \'APP_ERROR\'\\r\\n}"},{"name":"defaultTasks","ctype":"miscellaneous","subtype":"variable","file":"src/app/state/task.state.ts","type":"object","defaultValue":"{\\r\\n  1: { id: \'1\', title: \'Something\', state: \'TASK_INBOX\' },\\r\\n  2: { id: \'2\', title: \'Something more\', state: \'TASK_INBOX\' },\\r\\n  3: { id: \'3\', title: \'Something else\', state: \'TASK_INBOX\' },\\r\\n  4: { id: \'4\', title: \'Something again\', state: \'TASK_INBOX\' },\\r\\n}"}],"src/app/components/task.stories.ts":[{"name":"actionsData","ctype":"miscellaneous","subtype":"variable","file":"src/app/components/task.stories.ts","type":"object","defaultValue":"{\\r\\n  onPinTask: action(\'onPinTask\'),\\r\\n  onArchiveTask: action(\'onArchiveTask\'),\\r\\n}"},{"name":"Archived","ctype":"miscellaneous","subtype":"variable","file":"src/app/components/task.stories.ts","type":"","defaultValue":"Template.bind({})"},{"name":"Default","ctype":"miscellaneous","subtype":"variable","file":"src/app/components/task.stories.ts","type":"","defaultValue":"Template.bind({})"},{"name":"Pinned","ctype":"miscellaneous","subtype":"variable","file":"src/app/components/task.stories.ts","type":"","defaultValue":"Template.bind({})"},{"name":"Template","ctype":"miscellaneous","subtype":"variable","file":"src/app/components/task.stories.ts","type":"Story<TaskComponent>","defaultValue":"args => ({\\r\\n  props: {\\r\\n    ...args,\\r\\n    onPinTask: actionsData.onPinTask,\\r\\n    onArchiveTask: actionsData.onArchiveTask,\\r\\n  },\\r\\n})"}],"src/app/components/pure-inbox-screen.stories.ts":[{"name":"Default","ctype":"miscellaneous","subtype":"variable","file":"src/app/components/pure-inbox-screen.stories.ts","type":"","defaultValue":"Template.bind({})"},{"name":"Error","ctype":"miscellaneous","subtype":"variable","file":"src/app/components/pure-inbox-screen.stories.ts","type":"","defaultValue":"Template.bind({})"},{"name":"Template","ctype":"miscellaneous","subtype":"variable","file":"src/app/components/pure-inbox-screen.stories.ts","type":"Story<PureInboxScreenComponent>","defaultValue":"(args) => ({\\r\\n  component: PureInboxScreenComponent,\\r\\n  props: args,\\r\\n})"}],"src/app/components/pure-task-list.stories.ts":[{"name":"Default","ctype":"miscellaneous","subtype":"variable","file":"src/app/components/pure-task-list.stories.ts","type":"","defaultValue":"Template.bind({})"},{"name":"Empty","ctype":"miscellaneous","subtype":"variable","file":"src/app/components/pure-task-list.stories.ts","type":"","defaultValue":"Template.bind({})"},{"name":"Loading","ctype":"miscellaneous","subtype":"variable","file":"src/app/components/pure-task-list.stories.ts","type":"","defaultValue":"Template.bind({})"},{"name":"Template","ctype":"miscellaneous","subtype":"variable","file":"src/app/components/pure-task-list.stories.ts","type":"Story<PureTaskListComponent>","defaultValue":"args => ({\\r\\n  props: {\\r\\n    ...args,\\r\\n    onPinTask: TaskStories.actionsData.onPinTask,\\r\\n    onArchiveTask: TaskStories.actionsData.onArchiveTask,\\r\\n  },\\r\\n})"},{"name":"WithPinnedTasks","ctype":"miscellaneous","subtype":"variable","file":"src/app/components/pure-task-list.stories.ts","type":"","defaultValue":"Template.bind({})"}],"src/environments/environment.ts":[{"name":"environment","ctype":"miscellaneous","subtype":"variable","file":"src/environments/environment.ts","type":"object","defaultValue":"{\\n  production: false\\n}"}],"src/environments/environment.prod.ts":[{"name":"environment","ctype":"miscellaneous","subtype":"variable","file":"src/environments/environment.prod.ts","type":"object","defaultValue":"{\\n  production: true\\n}"}],"src/stories/Button.stories.ts":[{"name":"Large","ctype":"miscellaneous","subtype":"variable","file":"src/stories/Button.stories.ts","type":"","defaultValue":"Template.bind({})"},{"name":"Primary","ctype":"miscellaneous","subtype":"variable","file":"src/stories/Button.stories.ts","type":"","defaultValue":"Template.bind({})"},{"name":"Secondary","ctype":"miscellaneous","subtype":"variable","file":"src/stories/Button.stories.ts","type":"","defaultValue":"Template.bind({})"},{"name":"Small","ctype":"miscellaneous","subtype":"variable","file":"src/stories/Button.stories.ts","type":"","defaultValue":"Template.bind({})"},{"name":"Template","ctype":"miscellaneous","subtype":"variable","file":"src/stories/Button.stories.ts","type":"Story<Button>","defaultValue":"(args: Button) => ({\\n  component: Button,\\n  props: args,\\n})"}],"src/stories/Header.stories.ts":[{"name":"LoggedIn","ctype":"miscellaneous","subtype":"variable","file":"src/stories/Header.stories.ts","type":"","defaultValue":"Template.bind({})"},{"name":"LoggedOut","ctype":"miscellaneous","subtype":"variable","file":"src/stories/Header.stories.ts","type":"","defaultValue":"Template.bind({})"},{"name":"Template","ctype":"miscellaneous","subtype":"variable","file":"src/stories/Header.stories.ts","type":"Story<Header>","defaultValue":"(args: Header) => ({\\n  component: Header,\\n  props: args,\\n})"}],"src/stories/Page.stories.ts":[{"name":"LoggedIn","ctype":"miscellaneous","subtype":"variable","file":"src/stories/Page.stories.ts","type":"","defaultValue":"Template.bind({})"},{"name":"LoggedOut","ctype":"miscellaneous","subtype":"variable","file":"src/stories/Page.stories.ts","type":"","defaultValue":"Template.bind({})"},{"name":"Template","ctype":"miscellaneous","subtype":"variable","file":"src/stories/Page.stories.ts","type":"Story<Page>","defaultValue":"(args: Page) => ({\\n  component: Page,\\n  props: args,\\n})"}],"src/jest-config/__mocks__/globalMocks.ts":[{"name":"mock","ctype":"miscellaneous","subtype":"variable","file":"src/jest-config/__mocks__/globalMocks.ts","type":"","defaultValue":"() => {\\n    let storage = {};\\n    return {\\n      getItem: key => (key in storage ? storage[key] : null),\\n      setItem: (key, value) => (storage[key] = value || \'\'),\\n      removeItem: key => delete storage[key],\\n      clear: () => (storage = {}),\\n    };\\n  }"}]},"groupedFunctions":{},"groupedEnumerations":{},"groupedTypeAliases":{}},"routes":[],"coverage":{"count":3,"status":"low","files":[{"filePath":"src/app/app.component.ts","type":"component","linktype":"component","name":"AppComponent","coveragePercent":0,"coverageCount":"0/2","status":"low"},{"filePath":"src/app/components/inbox-screen.component.ts","type":"component","linktype":"component","name":"InboxScreenComponent","coveragePercent":0,"coverageCount":"0/2","status":"low"},{"filePath":"src/app/components/pure-inbox-screen.component.ts","type":"component","linktype":"component","name":"PureInboxScreenComponent","coveragePercent":0,"coverageCount":"0/2","status":"low"},{"filePath":"src/app/components/pure-inbox-screen.stories.ts","type":"variable","linktype":"miscellaneous","linksubtype":"variable","name":"Default","coveragePercent":0,"coverageCount":"0/1","status":"low"},{"filePath":"src/app/components/pure-inbox-screen.stories.ts","type":"variable","linktype":"miscellaneous","linksubtype":"variable","name":"Error","coveragePercent":0,"coverageCount":"0/1","status":"low"},{"filePath":"src/app/components/pure-inbox-screen.stories.ts","type":"variable","linktype":"miscellaneous","linksubtype":"variable","name":"Template","coveragePercent":0,"coverageCount":"0/1","status":"low"},{"filePath":"src/app/components/pure-task-list.component.ts","type":"component","linktype":"component","name":"PureTaskListComponent","coveragePercent":0,"coverageCount":"0/6","status":"low"},{"filePath":"src/app/components/pure-task-list.stories.ts","type":"variable","linktype":"miscellaneous","linksubtype":"variable","name":"Default","coveragePercent":0,"coverageCount":"0/1","status":"low"},{"filePath":"src/app/components/pure-task-list.stories.ts","type":"variable","linktype":"miscellaneous","linksubtype":"variable","name":"Empty","coveragePercent":0,"coverageCount":"0/1","status":"low"},{"filePath":"src/app/components/pure-task-list.stories.ts","type":"variable","linktype":"miscellaneous","linksubtype":"variable","name":"Loading","coveragePercent":0,"coverageCount":"0/1","status":"low"},{"filePath":"src/app/components/pure-task-list.stories.ts","type":"variable","linktype":"miscellaneous","linksubtype":"variable","name":"Template","coveragePercent":0,"coverageCount":"0/1","status":"low"},{"filePath":"src/app/components/pure-task-list.stories.ts","type":"variable","linktype":"miscellaneous","linksubtype":"variable","name":"WithPinnedTasks","coveragePercent":0,"coverageCount":"0/1","status":"low"},{"filePath":"src/app/components/task-list.component.ts","type":"component","linktype":"component","name":"TaskListComponent","coveragePercent":40,"coverageCount":"2/5","status":"medium"},{"filePath":"src/app/components/task.component.ts","type":"component","linktype":"component","name":"TaskComponent","coveragePercent":33,"coverageCount":"2/6","status":"medium"},{"filePath":"src/app/components/task.stories.ts","type":"variable","linktype":"miscellaneous","linksubtype":"variable","name":"actionsData","coveragePercent":0,"coverageCount":"0/1","status":"low"},{"filePath":"src/app/components/task.stories.ts","type":"variable","linktype":"miscellaneous","linksubtype":"variable","name":"Archived","coveragePercent":0,"coverageCount":"0/1","status":"low"},{"filePath":"src/app/components/task.stories.ts","type":"variable","linktype":"miscellaneous","linksubtype":"variable","name":"Default","coveragePercent":0,"coverageCount":"0/1","status":"low"},{"filePath":"src/app/components/task.stories.ts","type":"variable","linktype":"miscellaneous","linksubtype":"variable","name":"Pinned","coveragePercent":0,"coverageCount":"0/1","status":"low"},{"filePath":"src/app/components/task.stories.ts","type":"variable","linktype":"miscellaneous","linksubtype":"variable","name":"Template","coveragePercent":0,"coverageCount":"0/1","status":"low"},{"filePath":"src/app/models/task.model.ts","type":"interface","linktype":"interface","name":"Task","coveragePercent":0,"coverageCount":"0/4","status":"low"},{"filePath":"src/app/state/task.state.ts","type":"class","linktype":"classe","name":"AppError","coveragePercent":0,"coverageCount":"0/4","status":"low"},{"filePath":"src/app/state/task.state.ts","type":"class","linktype":"classe","name":"ArchiveTask","coveragePercent":0,"coverageCount":"0/4","status":"low"},{"filePath":"src/app/state/task.state.ts","type":"class","linktype":"classe","name":"PinTask","coveragePercent":0,"coverageCount":"0/4","status":"low"},{"filePath":"src/app/state/task.state.ts","type":"class","linktype":"classe","name":"TasksState","coveragePercent":0,"coverageCount":"0/6","status":"low"},{"filePath":"src/app/state/task.state.ts","type":"class","linktype":"classe","name":"TaskStateModel","coveragePercent":0,"coverageCount":"0/3","status":"low"},{"filePath":"src/app/state/task.state.ts","type":"variable","linktype":"miscellaneous","linksubtype":"variable","name":"actions","coveragePercent":0,"coverageCount":"0/1","status":"low"},{"filePath":"src/app/state/task.state.ts","type":"variable","linktype":"miscellaneous","linksubtype":"variable","name":"defaultTasks","coveragePercent":0,"coverageCount":"0/1","status":"low"},{"filePath":"src/environments/environment.prod.ts","type":"variable","linktype":"miscellaneous","linksubtype":"variable","name":"environment","coveragePercent":0,"coverageCount":"0/1","status":"low"},{"filePath":"src/environments/environment.ts","type":"variable","linktype":"miscellaneous","linksubtype":"variable","name":"environment","coveragePercent":0,"coverageCount":"0/1","status":"low"},{"filePath":"src/jest-config/__mocks__/globalMocks.ts","type":"variable","linktype":"miscellaneous","linksubtype":"variable","name":"mock","coveragePercent":0,"coverageCount":"0/1","status":"low"},{"filePath":"src/stories/Button.stories.ts","type":"variable","linktype":"miscellaneous","linksubtype":"variable","name":"Large","coveragePercent":0,"coverageCount":"0/1","status":"low"},{"filePath":"src/stories/Button.stories.ts","type":"variable","linktype":"miscellaneous","linksubtype":"variable","name":"Primary","coveragePercent":0,"coverageCount":"0/1","status":"low"},{"filePath":"src/stories/Button.stories.ts","type":"variable","linktype":"miscellaneous","linksubtype":"variable","name":"Secondary","coveragePercent":0,"coverageCount":"0/1","status":"low"},{"filePath":"src/stories/Button.stories.ts","type":"variable","linktype":"miscellaneous","linksubtype":"variable","name":"Small","coveragePercent":0,"coverageCount":"0/1","status":"low"},{"filePath":"src/stories/Button.stories.ts","type":"variable","linktype":"miscellaneous","linksubtype":"variable","name":"Template","coveragePercent":0,"coverageCount":"0/1","status":"low"},{"filePath":"src/stories/Header.stories.ts","type":"variable","linktype":"miscellaneous","linksubtype":"variable","name":"LoggedIn","coveragePercent":0,"coverageCount":"0/1","status":"low"},{"filePath":"src/stories/Header.stories.ts","type":"variable","linktype":"miscellaneous","linksubtype":"variable","name":"LoggedOut","coveragePercent":0,"coverageCount":"0/1","status":"low"},{"filePath":"src/stories/Header.stories.ts","type":"variable","linktype":"miscellaneous","linksubtype":"variable","name":"Template","coveragePercent":0,"coverageCount":"0/1","status":"low"},{"filePath":"src/stories/Page.stories.ts","type":"variable","linktype":"miscellaneous","linksubtype":"variable","name":"LoggedIn","coveragePercent":0,"coverageCount":"0/1","status":"low"},{"filePath":"src/stories/Page.stories.ts","type":"variable","linktype":"miscellaneous","linksubtype":"variable","name":"LoggedOut","coveragePercent":0,"coverageCount":"0/1","status":"low"},{"filePath":"src/stories/Page.stories.ts","type":"variable","linktype":"miscellaneous","linksubtype":"variable","name":"Template","coveragePercent":0,"coverageCount":"0/1","status":"low"},{"filePath":"src/stories/button.component.ts","type":"component","linktype":"component","name":"ButtonComponent","coveragePercent":83,"coverageCount":"5/6","status":"very-good"},{"filePath":"src/stories/header.component.ts","type":"component","linktype":"component","name":"HeaderComponent","coveragePercent":0,"coverageCount":"0/5","status":"low"},{"filePath":"src/stories/page.component.ts","type":"component","linktype":"component","name":"PageComponent","coveragePercent":0,"coverageCount":"0/5","status":"low"}]}}')},549:function(module,exports,__webpack_require__){__webpack_require__(550),__webpack_require__(703),__webpack_require__(704),__webpack_require__(943),__webpack_require__(946),__webpack_require__(948),__webpack_require__(949),__webpack_require__(947),__webpack_require__(944),__webpack_require__(950),__webpack_require__(951),__webpack_require__(939),module.exports=__webpack_require__(942)},617:function(module,exports){},704:function(module,__webpack_exports__,__webpack_require__){"use strict";__webpack_require__.r(__webpack_exports__);__webpack_require__(131)},939:function(module,exports,__webpack_require__){"use strict";(function(module){(0,__webpack_require__(131).configure)([__webpack_require__(940)],module,!1)}).call(this,__webpack_require__(207)(module))},940:function(module,exports,__webpack_require__){var map={"./pure-inbox-screen.stories.ts":945,"./pure-task-list.stories.ts":941,"./task.stories.ts":123};function webpackContext(req){var id=webpackContextResolve(req);return __webpack_require__(id)}function webpackContextResolve(req){if(!__webpack_require__.o(map,req)){var e=new Error("Cannot find module '"+req+"'");throw e.code="MODULE_NOT_FOUND",e}return map[req]}webpackContext.keys=function webpackContextKeys(){return Object.keys(map)},webpackContext.resolve=webpackContextResolve,module.exports=webpackContext,webpackContext.id=940},941:function(module,__webpack_exports__,__webpack_require__){"use strict";__webpack_require__.r(__webpack_exports__),__webpack_require__.d(__webpack_exports__,"Default",(function(){return Default})),__webpack_require__.d(__webpack_exports__,"WithPinnedTasks",(function(){return WithPinnedTasks})),__webpack_require__.d(__webpack_exports__,"Loading",(function(){return Loading})),__webpack_require__.d(__webpack_exports__,"Empty",(function(){return Empty}));var _storybook_angular__WEBPACK_IMPORTED_MODULE_0__=__webpack_require__(131),_angular_common__WEBPACK_IMPORTED_MODULE_1__=__webpack_require__(16),_pure_task_list_component__WEBPACK_IMPORTED_MODULE_2__=__webpack_require__(222),_task_component__WEBPACK_IMPORTED_MODULE_3__=__webpack_require__(149),_task_stories__WEBPACK_IMPORTED_MODULE_4__=__webpack_require__(123);__webpack_exports__.default={component:_pure_task_list_component__WEBPACK_IMPORTED_MODULE_2__.a,decorators:[Object(_storybook_angular__WEBPACK_IMPORTED_MODULE_0__.moduleMetadata)({declarations:[_pure_task_list_component__WEBPACK_IMPORTED_MODULE_2__.a,_task_component__WEBPACK_IMPORTED_MODULE_3__.a],imports:[_angular_common__WEBPACK_IMPORTED_MODULE_1__.a]}),Object(_storybook_angular__WEBPACK_IMPORTED_MODULE_0__.componentWrapperDecorator)(story=>`<div style="margin: 3em">${story}</div>`)],title:"TaskList"};const Template=args=>({props:Object.assign(Object.assign({},args),{onPinTask:_task_stories__WEBPACK_IMPORTED_MODULE_4__.actionsData.onPinTask,onArchiveTask:_task_stories__WEBPACK_IMPORTED_MODULE_4__.actionsData.onArchiveTask})}),Default=Template.bind({});Default.args={tasks:[Object.assign(Object.assign({},_task_stories__WEBPACK_IMPORTED_MODULE_4__.Default.args.task),{id:"1",title:"Task 1"}),Object.assign(Object.assign({},_task_stories__WEBPACK_IMPORTED_MODULE_4__.Default.args.task),{id:"2",title:"Task 2"}),Object.assign(Object.assign({},_task_stories__WEBPACK_IMPORTED_MODULE_4__.Default.args.task),{id:"3",title:"Task 3"}),Object.assign(Object.assign({},_task_stories__WEBPACK_IMPORTED_MODULE_4__.Default.args.task),{id:"4",title:"Task 4"}),Object.assign(Object.assign({},_task_stories__WEBPACK_IMPORTED_MODULE_4__.Default.args.task),{id:"5",title:"Task 5"}),Object.assign(Object.assign({},_task_stories__WEBPACK_IMPORTED_MODULE_4__.Default.args.task),{id:"6",title:"Task 6"})]};const WithPinnedTasks=Template.bind({});WithPinnedTasks.args={tasks:[...Default.args.tasks.slice(0,5),{id:"6",title:"Task 6 (pinned)",state:"TASK_PINNED"}]};const Loading=Template.bind({});Loading.args={tasks:[],loading:!0};const Empty=Template.bind({});Empty.args=Object.assign(Object.assign({},Loading.args),{loading:!1}),Default.parameters=Object.assign({storySource:{source:"args => ({\r\n  props: {\r\n    ...args,\r\n    onPinTask: TaskStories.actionsData.onPinTask,\r\n    onArchiveTask: TaskStories.actionsData.onArchiveTask,\r\n  },\r\n})"}},Default.parameters),WithPinnedTasks.parameters=Object.assign({storySource:{source:"args => ({\r\n  props: {\r\n    ...args,\r\n    onPinTask: TaskStories.actionsData.onPinTask,\r\n    onArchiveTask: TaskStories.actionsData.onArchiveTask,\r\n  },\r\n})"}},WithPinnedTasks.parameters),Loading.parameters=Object.assign({storySource:{source:"args => ({\r\n  props: {\r\n    ...args,\r\n    onPinTask: TaskStories.actionsData.onPinTask,\r\n    onArchiveTask: TaskStories.actionsData.onArchiveTask,\r\n  },\r\n})"}},Loading.parameters),Empty.parameters=Object.assign({storySource:{source:"args => ({\r\n  props: {\r\n    ...args,\r\n    onPinTask: TaskStories.actionsData.onPinTask,\r\n    onArchiveTask: TaskStories.actionsData.onArchiveTask,\r\n  },\r\n})"}},Empty.parameters)},942:function(module,__webpack_exports__,__webpack_require__){"use strict";__webpack_require__.r(__webpack_exports__);var _node_modules_style_loader_dist_runtime_injectStylesIntoStyleTag_js__WEBPACK_IMPORTED_MODULE_0__=__webpack_require__(527),_node_modules_style_loader_dist_runtime_injectStylesIntoStyleTag_js__WEBPACK_IMPORTED_MODULE_0___default=__webpack_require__.n(_node_modules_style_loader_dist_runtime_injectStylesIntoStyleTag_js__WEBPACK_IMPORTED_MODULE_0__),_node_modules_css_loader_dist_cjs_js_ref_8_1_node_modules_postcss_loader_dist_cjs_js_ref_8_2_styles_css__WEBPACK_IMPORTED_MODULE_1__=__webpack_require__(357),options={insert:"head",singleton:!1};_node_modules_style_loader_dist_runtime_injectStylesIntoStyleTag_js__WEBPACK_IMPORTED_MODULE_0___default()(_node_modules_css_loader_dist_cjs_js_ref_8_1_node_modules_postcss_loader_dist_cjs_js_ref_8_2_styles_css__WEBPACK_IMPORTED_MODULE_1__.a,options);__webpack_exports__.default=_node_modules_css_loader_dist_cjs_js_ref_8_1_node_modules_postcss_loader_dist_cjs_js_ref_8_2_styles_css__WEBPACK_IMPORTED_MODULE_1__.a.locals||{}},945:function(module,__webpack_exports__,__webpack_require__){"use strict";__webpack_require__.r(__webpack_exports__),__webpack_require__.d(__webpack_exports__,"Default",(function(){return Default})),__webpack_require__.d(__webpack_exports__,"Error",(function(){return Error}));var client=__webpack_require__(131),tslib_es6=__webpack_require__(15),core=__webpack_require__(0);let PureInboxScreenComponent=class PureInboxScreenComponent{};Object(tslib_es6.a)([Object(core.Input)(),Object(tslib_es6.b)("design:type",Object)],PureInboxScreenComponent.prototype,"error",void 0),PureInboxScreenComponent=Object(tslib_es6.a)([Object(core.Component)({selector:"app-pure-inbox-screen",template:'\n    <div *ngIf="error" class="page lists-show">\n      <div class="wrapper-message">\n        <span class="icon-face-sad"></span>\n        <div class="title-message">Oh no!</div>\n        <div class="subtitle-message">Something went wrong</div>\n      </div>\n    </div>\n\n    <div *ngIf="!error" class="page lists-show">\n      <nav>\n        <h1 class="title-page">\n          <span class="title-wrapper">Taskbox</span>\n        </h1>\n      </nav>\n      <app-task-list></app-task-list>\n    </div>\n  '})],PureInboxScreenComponent);var _a,_b,_c,common=__webpack_require__(16),ngxs_store=__webpack_require__(43),task_component=__webpack_require__(149);const actions_ARCHIVE_TASK="ARCHIVE_TASK",actions_PIN_TASK="PIN_TASK",actions_ERROR="APP_ERROR";class ArchiveTask{constructor(payload){this.payload=payload}}ArchiveTask.type=actions_ARCHIVE_TASK;class AppError{constructor(payload){this.payload=payload}}AppError.type=actions_ERROR;class PinTask{constructor(payload){this.payload=payload}}PinTask.type=actions_PIN_TASK;class TaskStateModel{}let TasksState=class TasksState{static getAllTasks(state){const entities=state.entities;return Object.keys(entities).map(id=>entities[+id])}static getError(state){const{error:error}=state;return error}pinTask({patchState:patchState,getState:getState},{payload:payload}){const state=getState().entities;patchState({entities:Object.assign(Object.assign({},state),{[payload]:Object.assign(Object.assign({},state[payload]),{state:"TASK_PINNED"})})})}archiveTask({patchState:patchState,getState:getState},{payload:payload}){const state=getState().entities;patchState({entities:Object.assign(Object.assign({},state),{[payload]:Object.assign(Object.assign({},state[payload]),{state:"TASK_ARCHIVED"})})})}setAppError({patchState:patchState,getState:getState},{payload:payload}){patchState({error:!getState().error})}};Object(tslib_es6.a)([Object(ngxs_store.a)(PinTask),Object(tslib_es6.b)("design:type",Function),Object(tslib_es6.b)("design:paramtypes",["function"==typeof(_a=void 0!==ngxs_store.StateContext&&ngxs_store.StateContext)?_a:Object,PinTask]),Object(tslib_es6.b)("design:returntype",void 0)],TasksState.prototype,"pinTask",null),Object(tslib_es6.a)([Object(ngxs_store.a)(ArchiveTask),Object(tslib_es6.b)("design:type",Function),Object(tslib_es6.b)("design:paramtypes",["function"==typeof(_b=void 0!==ngxs_store.StateContext&&ngxs_store.StateContext)?_b:Object,ArchiveTask]),Object(tslib_es6.b)("design:returntype",void 0)],TasksState.prototype,"archiveTask",null),Object(tslib_es6.a)([Object(ngxs_store.a)(AppError),Object(tslib_es6.b)("design:type",Function),Object(tslib_es6.b)("design:paramtypes",["function"==typeof(_c=void 0!==ngxs_store.StateContext&&ngxs_store.StateContext)?_c:Object,AppError]),Object(tslib_es6.b)("design:returntype",void 0)],TasksState.prototype,"setAppError",null),Object(tslib_es6.a)([Object(ngxs_store.d)(),Object(tslib_es6.b)("design:type",Function),Object(tslib_es6.b)("design:paramtypes",[TaskStateModel]),Object(tslib_es6.b)("design:returntype",void 0)],TasksState,"getAllTasks",null),Object(tslib_es6.a)([Object(ngxs_store.d)(),Object(tslib_es6.b)("design:type",Function),Object(tslib_es6.b)("design:paramtypes",[TaskStateModel]),Object(tslib_es6.b)("design:returntype",void 0)],TasksState,"getError",null),TasksState=Object(tslib_es6.a)([Object(ngxs_store.e)({name:"tasks",defaults:{entities:{1:{id:"1",title:"Something",state:"TASK_INBOX"},2:{id:"2",title:"Something more",state:"TASK_INBOX"},3:{id:"3",title:"Something else",state:"TASK_INBOX"},4:{id:"4",title:"Something again",state:"TASK_INBOX"}},error:!1}})],TasksState);var task_list_component_a,task_list_component_b,Observable=__webpack_require__(11);let task_list_component_TaskListComponent=class TaskListComponent{constructor(store){this.store=store}archiveTask(id){this.store.dispatch(new ArchiveTask(id))}pinTask(id){this.store.dispatch(new PinTask(id))}};Object(tslib_es6.a)([Object(ngxs_store.c)(TasksState.getAllTasks),Object(tslib_es6.b)("design:type","function"==typeof(task_list_component_a=void 0!==Observable.a&&Observable.a)?task_list_component_a:Object)],task_list_component_TaskListComponent.prototype,"tasks$",void 0),task_list_component_TaskListComponent=Object(tslib_es6.a)([Object(core.Component)({selector:"app-task-list",template:'\n    <app-pure-task-list\n      [tasks]="tasks$ | async"\n      (onArchiveTask)="archiveTask($event)"\n      (onPinTask)="pinTask($event)"\n    ></app-pure-task-list>\n  '}),Object(tslib_es6.b)("design:paramtypes",["function"==typeof(task_list_component_b=void 0!==ngxs_store.g&&ngxs_store.g)?task_list_component_b:Object])],task_list_component_TaskListComponent);var pure_task_list_component=__webpack_require__(222);let TaskModule=class TaskModule{};TaskModule=Object(tslib_es6.a)([Object(core.NgModule)({imports:[common.a,ngxs_store.b.forFeature([TasksState])],exports:[task_component.a,task_list_component_TaskListComponent],declarations:[task_component.a,task_list_component_TaskListComponent,pure_task_list_component.a],providers:[]})],TaskModule);__webpack_exports__.default={title:"PureInboxScreen",component:PureInboxScreenComponent,decorators:[Object(client.moduleMetadata)({imports:[common.a,TaskModule,ngxs_store.b.forRoot([TasksState])],providers:[ngxs_store.g]})]};const Template=args=>({component:PureInboxScreenComponent,props:args}),Default=Template.bind({}),Error=Template.bind({});Error.args={error:!0},Default.parameters=Object.assign({storySource:{source:"(args) => ({\r\n  component: PureInboxScreenComponent,\r\n  props: args,\r\n})"}},Default.parameters),Error.parameters=Object.assign({storySource:{source:"(args) => ({\r\n  component: PureInboxScreenComponent,\r\n  props: args,\r\n})"}},Error.parameters)},951:function(module,__webpack_exports__,__webpack_require__){"use strict";__webpack_require__.r(__webpack_exports__);var preview_namespaceObject={};__webpack_require__.r(preview_namespaceObject),__webpack_require__.d(preview_namespaceObject,"parameters",(function(){return parameters}));var client_api=__webpack_require__(956),esm=__webpack_require__(10),angular=__webpack_require__(525),documentation=__webpack_require__(526);Object(angular.setCompodocJson)(documentation);var parameters={actions:{argTypesRegex:"^on[A-Z].*"}};function ownKeys(object,enumerableOnly){var keys=Object.keys(object);if(Object.getOwnPropertySymbols){var symbols=Object.getOwnPropertySymbols(object);enumerableOnly&&(symbols=symbols.filter((function(sym){return Object.getOwnPropertyDescriptor(object,sym).enumerable}))),keys.push.apply(keys,symbols)}return keys}function _defineProperty(obj,key,value){return key in obj?Object.defineProperty(obj,key,{value:value,enumerable:!0,configurable:!0,writable:!0}):obj[key]=value,obj}Object.keys(preview_namespaceObject).forEach((function(key){var value=preview_namespaceObject[key];switch(key){case"args":case"argTypes":return esm.a.warn("Invalid args/argTypes in config, ignoring.",JSON.stringify(value));case"decorators":return value.forEach((function(decorator){return Object(client_api.b)(decorator,!1)}));case"loaders":return value.forEach((function(loader){return Object(client_api.c)(loader,!1)}));case"parameters":return Object(client_api.d)(function _objectSpread(target){for(var i=1;i<arguments.length;i++){var source=null!=arguments[i]?arguments[i]:{};i%2?ownKeys(Object(source),!0).forEach((function(key){_defineProperty(target,key,source[key])})):Object.getOwnPropertyDescriptors?Object.defineProperties(target,Object.getOwnPropertyDescriptors(source)):ownKeys(Object(source)).forEach((function(key){Object.defineProperty(target,key,Object.getOwnPropertyDescriptor(source,key))}))}return target}({},value),!1);case"argTypesEnhancers":return value.forEach((function(enhancer){return Object(client_api.a)(enhancer)}));case"globals":case"globalTypes":var v={};return v[key]=value,Object(client_api.d)(v,!1);default:return console.log(key+" was not supported :( !")}}))}},[[549,2,3]]]);